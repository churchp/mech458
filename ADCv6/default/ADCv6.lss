
ADCv6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000272  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000308  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ab  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f8  00000000  00000000  000003d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000112  00000000  00000000  000005cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000275  00000000  00000000  000006dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000107  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  00000aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_4>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e2 e7       	ldi	r30, 0x72	; 114
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a2 30       	cpi	r26, 0x02	; 2
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a2 e0       	ldi	r26, 0x02	; 2
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  d2:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <INTsetup>:

void INTsetup()
{
	//cli(); //disables all interrupts
            // config the external interrupt
    EIMSK |= 0b00001000; // enable INT1, INT3
  da:	eb 9a       	sbi	0x1d, 3	; 29
    EICRA |= _BV(ISC31) | _BV(ISC30); // rising edge interrupt
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 6c       	ori	r24, 0xC0	; 192
  e4:	80 83       	st	Z, r24
}
  e6:	08 95       	ret

000000e8 <PWMsetup>:

void PWMsetup() // Sets up the PWN - only needs to be called once 
{
    TCCR0A |= 0x83;             //Set Waveform Generator to mode to Fast PWM   
  e8:	84 b5       	in	r24, 0x24	; 36
  ea:	83 68       	ori	r24, 0x83	; 131
  ec:	84 bd       	out	0x24, r24	; 36
    TIMSK0 = TIMSK0 | 0b00000010;
  ee:	ee e6       	ldi	r30, 0x6E	; 110
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
    TCCR0B = 0b00000010;        //Clock scaling by 1/8
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0b10000000;         //Duty cycle set to 50%
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	87 bd       	out	0x27, r24	; 39
}
 100:	08 95       	ret

00000102 <ADCsetup>:

void ADCsetup() // Sets up the ADC - only needs to be called once 
{
    //cli();	//disables all interrupts
	        // config the external interrupt
    EIMSK |= (_BV(INT2)); // enable INT2
 102:	ea 9a       	sbi	0x1d, 2	; 29
    EICRA |= (_BV(ISC21) | _BV(ISC20)); // rising edge interrupt
 104:	e9 e6       	ldi	r30, 0x69	; 105
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 63       	ori	r24, 0x30	; 48
 10c:	80 83       	st	Z, r24
        // config ADC
        // by default, the ADC input (analog input is set to be ADC0 / PORTF0
    ADCSRA |= _BV(ADEN); // enable ADC
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
    ADCSRA |= _BV(ADIE); // enable interrupt of ADC
 118:	80 81       	ld	r24, Z
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	80 83       	st	Z, r24
    ADMUX |= (_BV(REFS0)); 
 11e:	ec e7       	ldi	r30, 0x7C	; 124
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24

}
 128:	08 95       	ret

0000012a <PWM>:

void PWM(int dutyCycle) 
{
    OCR0A = dutyCycle;
 12a:	87 bd       	out	0x27, r24	; 39
}
 12c:	08 95       	ret

0000012e <DCmotor>:

void DCmotor(int direction, int brakeHigh)  //direction 1 = CW, direction 0 = CCW, brakeHigh 1 = brake to DC
{
    if(brakeHigh){
 12e:	67 2b       	or	r22, r23
 130:	11 f0       	breq	.+4      	; 0x136 <DCmotor+0x8>
        PORTB = ~0x0F;       //Brake DC motor to Vcc
 132:	80 ef       	ldi	r24, 0xF0	; 240
 134:	05 c0       	rjmp	.+10     	; 0x140 <DCmotor+0x12>
    }
    else if(direction){
 136:	89 2b       	or	r24, r25
 138:	11 f0       	breq	.+4      	; 0x13e <DCmotor+0x10>
        PORTB = ~0x0B; 		//Run DC motor clockwise
 13a:	84 ef       	ldi	r24, 0xF4	; 244
 13c:	01 c0       	rjmp	.+2      	; 0x140 <DCmotor+0x12>
    }
    else if(direction == 0){
        PORTB = ~0x07; 		//Run DC motor counter-clockwise
 13e:	88 ef       	ldi	r24, 0xF8	; 248
 140:	85 b9       	out	0x05, r24	; 5
 142:	08 95       	ret

00000144 <__vector_4>:
    }
}

ISR(INT3_vect) //OR sensor stops belt
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
    STATE = 2;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 01 01 	sts	0x0101, r25
 15a:	80 93 00 01 	sts	0x0100, r24
}
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <mTimer>:
	DCmotor(0,1);   //brake high (to Vcc)
	PORTA = 0xAA;
}
*/
void mTimer(int count)
{
 16c:	9c 01       	movw	r18, r24
	cli();
 16e:	f8 94       	cli
    int i = 0;                    // Loop counter
    TCCR1B |= _BV(WGM12);         // Set to Waveform Generator Mode 12 (Clear on Timer Compare)
 170:	80 91 81 00 	lds	r24, 0x0081
 174:	88 60       	ori	r24, 0x08	; 8
 176:	80 93 81 00 	sts	0x0081, r24
    OCR1A = 0x03E8;               // Set output compare register for 1000 cycles(1ms)
 17a:	88 ee       	ldi	r24, 0xE8	; 232
 17c:	93 e0       	ldi	r25, 0x03	; 3
 17e:	90 93 89 00 	sts	0x0089, r25
 182:	80 93 88 00 	sts	0x0088, r24
    TCNT1 = 0x0000;               // Set initial counter timer time to 0
 186:	10 92 85 00 	sts	0x0085, r1
 18a:	10 92 84 00 	sts	0x0084, r1
    TIMSK1 = TIMSK1 | 0b00000010; // Enable output compare interrupt
 18e:	80 91 6f 00 	lds	r24, 0x006F
 192:	82 60       	ori	r24, 0x02	; 2
 194:	80 93 6f 00 	sts	0x006F, r24
    TIFR1 |= _BV(OCF1A);          // Clear interrupt flag and start timer
 198:	b1 9a       	sbi	0x16, 1	; 22
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <mTimer+0x3c>

    //TODO: switch this to a real interrupt
    while (i < count)
    {
        //When the interrupt's flag is triggered
        if ((TIFR1 & 0x02) == 0x02)
 1a0:	b1 9b       	sbis	0x16, 1	; 22
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <mTimer+0x34>
        {
            TIFR1 |= _BV(OCF1A); //Clear the flag
 1a4:	b1 9a       	sbi	0x16, 1	; 22
            i++;                 //increment the loop
 1a6:	01 96       	adiw	r24, 0x01	; 1
    TCNT1 = 0x0000;               // Set initial counter timer time to 0
    TIMSK1 = TIMSK1 | 0b00000010; // Enable output compare interrupt
    TIFR1 |= _BV(OCF1A);          // Clear interrupt flag and start timer

    //TODO: switch this to a real interrupt
    while (i < count)
 1a8:	82 17       	cp	r24, r18
 1aa:	93 07       	cpc	r25, r19
 1ac:	cc f3       	brlt	.-14     	; 0x1a0 <mTimer+0x34>
        {
            TIFR1 |= _BV(OCF1A); //Clear the flag
            i++;                 //increment the loop
        }
    }
	sei();
 1ae:	78 94       	sei
    return;
}
 1b0:	08 95       	ret

000001b2 <main>:
void INTsetup();                         //initializing button

//################## MAIN ROUTINE ##################


int main(int argc, char *argv[]){
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29

    DDRA = 0xFF;            //lights
 1c0:	9f ef       	ldi	r25, 0xFF	; 255
 1c2:	91 b9       	out	0x01, r25	; 1
 	DDRD = 0b01110111;		//interrupt input on PIND3
 1c4:	87 e7       	ldi	r24, 0x77	; 119
 1c6:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xFF;           //Sets all PORT B pins to output (for the pwm and motor)
 1c8:	94 b9       	out	0x04, r25	; 4
    TCCR1B |= _BV(CS10);   //Initialize the timer control register, clock scaling CS10              
 1ca:	80 91 81 00 	lds	r24, 0x0081
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	80 93 81 00 	sts	0x0081, r24

	cli();
 1d4:	f8 94       	cli

void INTsetup()
{
	//cli(); //disables all interrupts
            // config the external interrupt
    EIMSK |= 0b00001000; // enable INT1, INT3
 1d6:	eb 9a       	sbi	0x1d, 3	; 29
    EICRA |= _BV(ISC31) | _BV(ISC30); // rising edge interrupt
 1d8:	80 91 69 00 	lds	r24, 0x0069
 1dc:	80 6c       	ori	r24, 0xC0	; 192
 1de:	80 93 69 00 	sts	0x0069, r24
	cli();

    //PWMsetup(); // calls PWMsetup function to ready the PWM for use 
	INTsetup(); //calls INTsetup

    sei(); // sets the Global Enable for all interrupts
 1e2:	78 94       	sei
					PORTA = 0x02;
					mTimer(30);
				//}
				break;
			case(3):	//ADC is working, then output ADC result
				PORTA = 0x04;
 1e4:	94 e0       	ldi	r25, 0x04	; 4
 1e6:	d9 2e       	mov	r13, r25
				if((PIND & 0x80) == 0){
					mTimer(30);
					if((PIND & 0x80) == 0) STATE = 1;
 1e8:	01 e0       	ldi	r16, 0x01	; 1
 1ea:	10 e0       	ldi	r17, 0x00	; 0
				break;
			case(1):	//belt runnning state
				if(motorFlag != 1){
					DCmotor(1,0); 			//run motor CW
					motorFlag = 1;
					PORTA = 0x01;
 1ec:	ee 24       	eor	r14, r14
 1ee:	e3 94       	inc	r14
				break;
			case(2):	//piece has reached the OR sensor
				//if(motorFlag != 0){
					DCmotor(0,1);		//brake high to Vcc
					motorFlag = 0;
					PORTA = 0x02;
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	f8 2e       	mov	r15, r24
    

    while (1) //Main while loop
    {

		switch(STATE)
 1f4:	c0 91 00 01 	lds	r28, 0x0100
 1f8:	d0 91 01 01 	lds	r29, 0x0101
 1fc:	c2 30       	cpi	r28, 0x02	; 2
 1fe:	d1 05       	cpc	r29, r1
 200:	c1 f0       	breq	.+48     	; 0x232 <main+0x80>
 202:	c3 30       	cpi	r28, 0x03	; 3
 204:	d1 05       	cpc	r29, r1
 206:	29 f1       	breq	.+74     	; 0x252 <main+0xa0>
 208:	c1 30       	cpi	r28, 0x01	; 1
 20a:	d1 05       	cpc	r29, r1
 20c:	99 f7       	brne	.-26     	; 0x1f4 <main+0x42>
		{
			case(0): //idle state

				break;
			case(1):	//belt runnning state
				if(motorFlag != 1){
 20e:	80 91 04 01 	lds	r24, 0x0104
 212:	90 91 05 01 	lds	r25, 0x0105
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	69 f3       	breq	.-38     	; 0x1f4 <main+0x42>
					DCmotor(1,0); 			//run motor CW
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	0e 94 97 00 	call	0x12e	; 0x12e <DCmotor>
					motorFlag = 1;
 226:	d0 93 05 01 	sts	0x0105, r29
 22a:	c0 93 04 01 	sts	0x0104, r28
					PORTA = 0x01;
 22e:	e2 b8       	out	0x02, r14	; 2
 230:	0b c0       	rjmp	.+22     	; 0x248 <main+0x96>
					mTimer(30);
				}
				break;
			case(2):	//piece has reached the OR sensor
				//if(motorFlag != 0){
					DCmotor(0,1);		//brake high to Vcc
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	0e 94 97 00 	call	0x12e	; 0x12e <DCmotor>
					motorFlag = 0;
 23e:	10 92 05 01 	sts	0x0105, r1
 242:	10 92 04 01 	sts	0x0104, r1
					PORTA = 0x02;
 246:	f2 b8       	out	0x02, r15	; 2
					mTimer(30);
 248:	8e e1       	ldi	r24, 0x1E	; 30
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 b6 00 	call	0x16c	; 0x16c <mTimer>
 250:	d1 cf       	rjmp	.-94     	; 0x1f4 <main+0x42>
				//}
				break;
			case(3):	//ADC is working, then output ADC result
				PORTA = 0x04;
 252:	d2 b8       	out	0x02, r13	; 2
				if((PIND & 0x80) == 0){
 254:	4f 99       	sbic	0x09, 7	; 9
 256:	ce cf       	rjmp	.-100    	; 0x1f4 <main+0x42>
					mTimer(30);
 258:	8e e1       	ldi	r24, 0x1E	; 30
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 b6 00 	call	0x16c	; 0x16c <mTimer>
					if((PIND & 0x80) == 0) STATE = 1;
 260:	4f 99       	sbic	0x09, 7	; 9
 262:	c8 cf       	rjmp	.-112    	; 0x1f4 <main+0x42>
 264:	10 93 01 01 	sts	0x0101, r17
 268:	00 93 00 01 	sts	0x0100, r16
 26c:	c3 cf       	rjmp	.-122    	; 0x1f4 <main+0x42>

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
