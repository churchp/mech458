
ADCv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  00000256  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008c  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a0  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000103  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000190  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ec  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000068  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_2>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e2 ee       	ldi	r30, 0xE2	; 226
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a5 30       	cpi	r26, 0x05	; 5
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  d2:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <DCmotor>:
}


void DCmotor(int direction, int brakeHigh)  //direction 1 = CW, direction 0 = CCW, brakeHigh 1 = brake to DC
{
    if(brakeHigh){
  da:	67 2b       	or	r22, r23
  dc:	11 f0       	breq	.+4      	; 0xe2 <DCmotor+0x8>
        PORTF = ~0x0F;       //Brake DC motor to Vcc
  de:	80 ef       	ldi	r24, 0xF0	; 240
  e0:	05 c0       	rjmp	.+10     	; 0xec <DCmotor+0x12>
    }
    else if(direction){
  e2:	89 2b       	or	r24, r25
  e4:	11 f0       	breq	.+4      	; 0xea <DCmotor+0x10>
        PORTF = ~0x0B; 		//Run DC motor clockwise
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	01 c0       	rjmp	.+2      	; 0xec <DCmotor+0x12>
    }
    else if(direction == 0){
        PORTF = ~0x07; 		//Run DC motor counter-clockwise
  ea:	88 ef       	ldi	r24, 0xF8	; 248
  ec:	81 bb       	out	0x11, r24	; 17
  ee:	08 95       	ret

000000f0 <buttonSetup>:
    }
}

void buttonSetup()
{
    cli();  // disable all of the interrupt
  f0:	f8 94       	cli
            // config the external interrupt
    EIMSK |= (_BV(INT1)); // enable INT1
  f2:	e9 9a       	sbi	0x1d, 1	; 29
    EICRA |= (_BV(ISC11) | _BV(ISC10)); // rising edge interrupt
  f4:	e9 e6       	ldi	r30, 0x69	; 105
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8c 60       	ori	r24, 0x0C	; 12
  fc:	80 83       	st	Z, r24
}
  fe:	08 95       	ret

00000100 <PWMsetup>:

void PWMsetup() // Sets up the PWN - only needs to be called once 
{
    TCCR0A |= 0x83;             //Set Waveform Generator to mode to Fast PWM   
 100:	84 b5       	in	r24, 0x24	; 36
 102:	83 68       	ori	r24, 0x83	; 131
 104:	84 bd       	out	0x24, r24	; 36
    TIMSK0 = TIMSK0 | 0b00000010;
 106:	ee e6       	ldi	r30, 0x6E	; 110
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
    TCCR0B = 0b00000010;        //Clock scaling by 1/8
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0b10000000;         //Duty cycle set to 50%
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	87 bd       	out	0x27, r24	; 39
           
   
}//end PWMsetup
 118:	08 95       	ret

0000011a <main>:
//################## MAIN ROUTINE ##################


int main(int argc, char *argv[]){

    DDRA = 0xFF;            //lights
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	81 b9       	out	0x01, r24	; 1
    DDRF = 0xFF;           //Sets all PORT F pins to output (for the DC motor)
 11e:	80 bb       	out	0x10, r24	; 16
    DDRB = 0xFF;           //Sets all PORT B pins to output (for the pwm)
 120:	84 b9       	out	0x04, r24	; 4
    DDRE = 0x00;           //Sets all PORT E pins to input (for motor choices)
 122:	1d b8       	out	0x0d, r1	; 13
    TCCR1B |= _BV(CS10);   //Initialize the timer control register, clock scaling CS10              
 124:	80 91 81 00 	lds	r24, 0x0081
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 93 81 00 	sts	0x0081, r24

    PWMsetup(); // calls PWMsetup function to ready the PWM for use 
 12e:	0e 94 80 00 	call	0x100	; 0x100 <PWMsetup>
    }
}

void buttonSetup()
{
    cli();  // disable all of the interrupt
 132:	f8 94       	cli
            // config the external interrupt
    EIMSK |= (_BV(INT1)); // enable INT1
 134:	e9 9a       	sbi	0x1d, 1	; 29
    EICRA |= (_BV(ISC11) | _BV(ISC10)); // rising edge interrupt
 136:	80 91 69 00 	lds	r24, 0x0069
 13a:	8c 60       	ori	r24, 0x0C	; 12
 13c:	80 93 69 00 	sts	0x0069, r24

    PWMsetup(); // calls PWMsetup function to ready the PWM for use 
    //ADCsetup(); // calls ADCsetup function to ready the ADC for use 
    buttonSetup(); //calls buttonsetup

    sei(); // sets the Global Enable for all interrupts
 140:	78 94       	sei
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0x28>

00000144 <PWM>:
   
}//end PWMsetup

void PWM(int dutyCycle) //%%%%%%%%%%%%%%%%%%%%%%
{
    OCR0A = dutyCycle;
 144:	87 bd       	out	0x27, r24	; 39
}
 146:	08 95       	ret

00000148 <__vector_2>:



ISR(INT1_vect) //motor controlled by button
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
    PORTA = 0x01;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	82 b9       	out	0x02, r24	; 2

    if(motorFlag) {
 172:	80 91 02 01 	lds	r24, 0x0102
 176:	90 91 03 01 	lds	r25, 0x0103
 17a:	89 2b       	or	r24, r25
 17c:	59 f0       	breq	.+22     	; 0x194 <__vector_2+0x4c>
    DCmotor(0,1);   //brake high (to Vcc)
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    motorFlag = 0;
 18a:	10 92 03 01 	sts	0x0103, r1
 18e:	10 92 02 01 	sts	0x0102, r1
 192:	12 c0       	rjmp	.+36     	; 0x1b8 <__vector_2+0x70>
    }
    else if (!motorFlag) {
 194:	80 91 02 01 	lds	r24, 0x0102
 198:	90 91 03 01 	lds	r25, 0x0103
 19c:	89 2b       	or	r24, r25
 19e:	61 f4       	brne	.+24     	; 0x1b8 <__vector_2+0x70>
    DCmotor(1,0); 			//run motor CW
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    motorFlag = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 03 01 	sts	0x0103, r25
 1b4:	80 93 02 01 	sts	0x0102, r24
    }
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0b be       	out	0x3b, r0	; 59
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
