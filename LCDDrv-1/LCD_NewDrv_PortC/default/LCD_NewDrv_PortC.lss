
LCD_NewDrv_PortC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000004b0  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e0  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000768  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000271  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000555  00000000  00000000  00000fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001bf  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000036b  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_3>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_29>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ec e3       	ldi	r30, 0x3C	; 60
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a3 30       	cpi	r26, 0x03	; 3
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  d2:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <ADCsetup>:


void ADCsetup() // Sets up the ADC - only needs to be called once 
{

    cli();  // disable all of the interrupt
  da:	f8 94       	cli
            // config the external interrupt
    EIMSK |= (_BV(INT2)); // enable INT2
  dc:	ea 9a       	sbi	0x1d, 2	; 29
    EICRA |= (_BV(ISC21) | _BV(ISC20)); // rising edge interrupt
  de:	e9 e6       	ldi	r30, 0x69	; 105
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 63       	ori	r24, 0x30	; 48
  e6:	80 83       	st	Z, r24
        // config ADC
        // by default, the ADC input (analog input is set to be ADC0 / PORTF0
    ADCSRA |= _BV(ADEN); // enable ADC
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
    ADCSRA |= _BV(ADIE); // enable interrupt of ADC
  f2:	80 81       	ld	r24, Z
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	80 83       	st	Z, r24
    ADMUX |= (_BV(ADLAR) | _BV(REFS0)); 
  f8:	ec e7       	ldi	r30, 0x7C	; 124
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 66       	ori	r24, 0x60	; 96
 100:	80 83       	st	Z, r24

}
 102:	08 95       	ret

00000104 <__vector_3>:

ISR(INT2_vect)
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	0b b6       	in	r0, 0x3b	; 59
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
    ADCSRA |= _BV(ADSC); // when there is a rising edge, we need to do ADC
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0b be       	out	0x3b, r0	; 59
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_29>:


// the interrupt will be trigured if the ADC is done
ISR(ADC_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
    ADC_result = ADCH;  //%%%%%%%%%%%%%%%%%%%%%%%%%%%
 144:	80 91 79 00 	lds	r24, 0x0079
 148:	80 93 02 01 	sts	0x0102, r24
    ADC_result_flag = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 01 01 	sts	0x0101, r25
 154:	80 93 00 01 	sts	0x0100, r24
}
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <mTimer>:

void mTimer (int count)
{
 166:	9c 01       	movw	r18, r24
   int i;
   i = 0;
   TCCR1B |= _BV (CS10);  //  sets prescalar to DIV 1
 168:	80 91 81 00 	lds	r24, 0x0081
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	80 93 81 00 	sts	0x0081, r24
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 172:	80 91 81 00 	lds	r24, 0x0081
 176:	88 60       	ori	r24, 0x08	; 8
 178:	80 93 81 00 	sts	0x0081, r24
   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 17c:	88 ee       	ldi	r24, 0xE8	; 232
 17e:	93 e0       	ldi	r25, 0x03	; 3
 180:	90 93 89 00 	sts	0x0089, r25
 184:	80 93 88 00 	sts	0x0088, r24
   /* Initialize Timer 1 to zero */
   TCNT1 = 0x0000;
 188:	10 92 85 00 	sts	0x0085, r1
 18c:	10 92 84 00 	sts	0x0084, r1
   /* Enable the output compare interrupt */
   //TIMSK1 |= _BV(OCIE1A);  //remove if global interrups is set (sei())
   /* Clear the timer interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 190:	b1 9a       	sbi	0x16, 1	; 22
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <mTimer+0x3a>
   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
   {
      while ((TIFR1 & 0x02) != 0x02);
 198:	b1 9b       	sbis	0x16, 1	; 22
 19a:	fe cf       	rjmp	.-4      	; 0x198 <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 19c:	b1 9a       	sbi	0x16, 1	; 22
	   i++;
 19e:	01 96       	adiw	r24, 0x01	; 1
   /* Enable the output compare interrupt */
   //TIMSK1 |= _BV(OCIE1A);  //remove if global interrups is set (sei())
   /* Clear the timer interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
 1a0:	82 17       	cp	r24, r18
 1a2:	93 07       	cpc	r25, r19
 1a4:	cc f3       	brlt	.-14     	; 0x198 <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
	   i++;
   } /* while */
   TCCR1B &= ~_BV (CS10);  //  disable prescalar
 1a6:	80 91 81 00 	lds	r24, 0x0081
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	80 93 81 00 	sts	0x0081, r24
   return;
}  /* mTimer */
 1b0:	08 95       	ret

000001b2 <main>:
int main(int argc,char*argv[])
{
	unsigned int i = 1212;

    //Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 55 01 	call	0x2aa	; 0x2aa <InitLCD>

	//Clear the screen
	LCDClear();
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDByte>

	//Simple string printing
	LCDWriteIntXY(4,0,i,4);
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LCDGotoXY>
 1c8:	8c eb       	ldi	r24, 0xBC	; 188
 1ca:	94 e0       	ldi	r25, 0x04	; 4
 1cc:	64 e0       	ldi	r22, 0x04	; 4
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0e 94 8e 01 	call	0x31c	; 0x31c <LCDWriteInt>
	//LCDWriteStringXY(12,1,"%");


    DDRA = 0xFF;    //Sets all PORT A pins to output (for the LEDs)
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	81 b9       	out	0x01, r24	; 1
    DDRF = 0x00;    //Sets all PORT F pins to input (for the potentiometer)
 1d8:	10 ba       	out	0x10, r1	; 16

    sei(); // sets the Global Enable for all interrupts
 1da:	78 94       	sei
    ADCSRA |= _BV(ADSC); // initialize the ADC, start one conversion at the beginning
 1dc:	80 91 7a 00 	lds	r24, 0x007A
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	80 93 7a 00 	sts	0x007A, r24

    PORTA = 0x0F;
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	82 b9       	out	0x02, r24	; 2

     while (1) //Main while loop
    {
        

        if (ADC_result_flag)
 1ea:	80 91 00 01 	lds	r24, 0x0100
 1ee:	90 91 01 01 	lds	r25, 0x0101
 1f2:	89 2b       	or	r24, r25
 1f4:	d1 f3       	breq	.-12     	; 0x1ea <main+0x38>
        {
            PORTA = ADC_result;     //display ADC result to the LCD display
 1f6:	80 91 02 01 	lds	r24, 0x0102
 1fa:	82 b9       	out	0x02, r24	; 2
            ADC_result_flag = 0x00; //reset ADC flag
 1fc:	10 92 01 01 	sts	0x0101, r1
 200:	10 92 00 01 	sts	0x0100, r1
 204:	f2 cf       	rjmp	.-28     	; 0x1ea <main+0x38>

00000206 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 206:	87 b1       	in	r24, 0x07	; 7
 208:	80 7f       	andi	r24, 0xF0	; 240
 20a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 20c:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 20e:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	47 9a       	sbi	0x08, 7	; 8
 21a:	82 2f       	mov	r24, r18
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 220:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 222:	82 95       	swap	r24
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	92 2f       	mov	r25, r18
 228:	9a 95       	dec	r25
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 22c:	47 98       	cbi	0x08, 7	; 8
 22e:	92 2f       	mov	r25, r18
 230:	9a 95       	dec	r25
 232:	f1 f7       	brne	.-4      	; 0x230 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 234:	47 9a       	sbi	0x08, 7	; 8
 236:	92 2f       	mov	r25, r18
 238:	9a 95       	dec	r25
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 23c:	96 b1       	in	r25, 0x06	; 6
 23e:	92 2f       	mov	r25, r18
 240:	9a 95       	dec	r25
 242:	f1 f7       	brne	.-4      	; 0x240 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 244:	47 98       	cbi	0x08, 7	; 8
 246:	92 2f       	mov	r25, r18
 248:	9a 95       	dec	r25
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 24c:	87 fd       	sbrc	r24, 7
 24e:	e4 cf       	rjmp	.-56     	; 0x218 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 250:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 252:	87 b1       	in	r24, 0x07	; 7
 254:	8f 60       	ori	r24, 0x0F	; 15
 256:	87 b9       	out	0x07, r24	; 7

}
 258:	08 95       	ret

0000025a <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 25a:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 25c:	66 23       	and	r22, r22
 25e:	11 f4       	brne	.+4      	; 0x264 <LCDByte+0xa>
	CLEAR_RS();
 260:	46 98       	cbi	0x08, 6	; 8
 262:	01 c0       	rjmp	.+2      	; 0x266 <LCDByte+0xc>
else
	SET_RS();
 264:	46 9a       	sbi	0x08, 6	; 8
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	82 2f       	mov	r24, r18
 26a:	8a 95       	dec	r24
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 26e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 270:	88 b1       	in	r24, 0x08	; 8
 272:	93 2f       	mov	r25, r19
 274:	92 95       	swap	r25
 276:	9f 70       	andi	r25, 0x0F	; 15
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 27c:	98 b9       	out	0x08, r25	; 8
 27e:	82 2f       	mov	r24, r18
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 284:	47 98       	cbi	0x08, 7	; 8
 286:	82 2f       	mov	r24, r18
 288:	8a 95       	dec	r24
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 28c:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 28e:	88 b1       	in	r24, 0x08	; 8
 290:	3f 70       	andi	r19, 0x0F	; 15
 292:	80 7f       	andi	r24, 0xF0	; 240
 294:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 296:	88 b9       	out	0x08, r24	; 8
 298:	82 2f       	mov	r24, r18
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 29e:	47 98       	cbi	0x08, 7	; 8
 2a0:	2a 95       	dec	r18
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 2a4:	0e 94 03 01 	call	0x206	; 0x206 <LCDBusyLoop>
}
 2a8:	08 95       	ret

000002aa <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 2aa:	1f 93       	push	r17
 2ac:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ae:	8c e4       	ldi	r24, 0x4C	; 76
 2b0:	9d e1       	ldi	r25, 0x1D	; 29
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 2b6:	87 b1       	in	r24, 0x07	; 7
 2b8:	8f 60       	ori	r24, 0x0F	; 15
 2ba:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 2bc:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 2be:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 2c0:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 2c2:	88 b1       	in	r24, 0x08	; 8
 2c4:	80 7f       	andi	r24, 0xF0	; 240
 2c6:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 2c8:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 2ca:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 2cc:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	98 2f       	mov	r25, r24
 2d2:	9a 95       	dec	r25
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 2d6:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 2d8:	41 9a       	sbi	0x08, 1	; 8
 2da:	98 2f       	mov	r25, r24
 2dc:	9a 95       	dec	r25
 2de:	f1 f7       	brne	.-4      	; 0x2dc <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 2e0:	47 98       	cbi	0x08, 7	; 8
 2e2:	8a 95       	dec	r24
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 2e6:	0e 94 03 01 	call	0x206	; 0x206 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 2ea:	81 2f       	mov	r24, r17
 2ec:	8c 60       	ori	r24, 0x0C	; 12
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 2f4:	88 e2       	ldi	r24, 0x28	; 40
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDByte>
}
 2fc:	1f 91       	pop	r17
 2fe:	08 95       	ret

00000300 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	04 c0       	rjmp	.+8      	; 0x310 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDByte>
	msg++;
 30e:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 310:	88 81       	ld	r24, Y
 312:	88 23       	and	r24, r24
 314:	c9 f7       	brne	.-14     	; 0x308 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	df 93       	push	r29
 326:	cf 93       	push	r28
 328:	00 d0       	rcall	.+0      	; 0x32a <LCDWriteInt+0xe>
 32a:	00 d0       	rcall	.+0      	; 0x32c <LCDWriteInt+0x10>
 32c:	0f 92       	push	r0
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	9c 01       	movw	r18, r24
 334:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 336:	fe 01       	movw	r30, r28
 338:	31 96       	adiw	r30, 0x01	; 1
 33a:	85 e0       	ldi	r24, 0x05	; 5
 33c:	df 01       	movw	r26, r30
 33e:	1d 92       	st	X+, r1
 340:	8a 95       	dec	r24
 342:	e9 f7       	brne	.-6      	; 0x33e <LCDWriteInt+0x22>
 344:	fe 01       	movw	r30, r28
 346:	35 96       	adiw	r30, 0x05	; 5
 348:	0d c0       	rjmp	.+26     	; 0x364 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 34a:	c9 01       	movw	r24, r18
 34c:	6a e0       	ldi	r22, 0x0A	; 10
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__divmodhi4>
 354:	80 83       	st	Z, r24
	val=val/10;
 356:	c9 01       	movw	r24, r18
 358:	6a e0       	ldi	r22, 0x0A	; 10
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__divmodhi4>
 360:	9b 01       	movw	r18, r22
 362:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 364:	21 15       	cp	r18, r1
 366:	31 05       	cpc	r19, r1
 368:	81 f7       	brne	.-32     	; 0x34a <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 36a:	bf ef       	ldi	r27, 0xFF	; 255
 36c:	0f 3f       	cpi	r16, 0xFF	; 255
 36e:	1b 07       	cpc	r17, r27
 370:	79 f4       	brne	.+30     	; 0x390 <LCDWriteInt+0x74>
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 376:	ae 01       	movw	r20, r28
 378:	4f 5f       	subi	r20, 0xFF	; 255
 37a:	5f 4f       	sbci	r21, 0xFF	; 255
 37c:	02 c0       	rjmp	.+4      	; 0x382 <LCDWriteInt+0x66>
 37e:	2f 5f       	subi	r18, 0xFF	; 255
 380:	3f 4f       	sbci	r19, 0xFF	; 255
 382:	fa 01       	movw	r30, r20
 384:	e2 0f       	add	r30, r18
 386:	f3 1f       	adc	r31, r19
 388:	80 81       	ld	r24, Z
 38a:	88 23       	and	r24, r24
 38c:	c1 f3       	breq	.-16     	; 0x37e <LCDWriteInt+0x62>
 38e:	04 c0       	rjmp	.+8      	; 0x398 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 390:	25 e0       	ldi	r18, 0x05	; 5
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	20 1b       	sub	r18, r16
 396:	31 0b       	sbc	r19, r17
 398:	7e 01       	movw	r14, r28
 39a:	08 94       	sec
 39c:	e1 1c       	adc	r14, r1
 39e:	f1 1c       	adc	r15, r1
 3a0:	e2 0e       	add	r14, r18
 3a2:	f3 1e       	adc	r15, r19
 3a4:	89 01       	movw	r16, r18
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 3a8:	f7 01       	movw	r30, r14
 3aa:	81 91       	ld	r24, Z+
 3ac:	7f 01       	movw	r14, r30
 3ae:	80 5d       	subi	r24, 0xD0	; 208
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 3b6:	0f 5f       	subi	r16, 0xFF	; 255
 3b8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ba:	05 30       	cpi	r16, 0x05	; 5
 3bc:	11 05       	cpc	r17, r1
 3be:	a4 f3       	brlt	.-24     	; 0x3a8 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 3d8:	88 32       	cpi	r24, 0x28	; 40
 3da:	30 f4       	brcc	.+12     	; 0x3e8 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 3dc:	61 11       	cpse	r22, r1
 3de:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDByte>
 3e8:	08 95       	ret

000003ea <__divmodhi4>:
 3ea:	97 fb       	bst	r25, 7
 3ec:	09 2e       	mov	r0, r25
 3ee:	07 26       	eor	r0, r23
 3f0:	0a d0       	rcall	.+20     	; 0x406 <__divmodhi4_neg1>
 3f2:	77 fd       	sbrc	r23, 7
 3f4:	04 d0       	rcall	.+8      	; 0x3fe <__divmodhi4_neg2>
 3f6:	0c d0       	rcall	.+24     	; 0x410 <__udivmodhi4>
 3f8:	06 d0       	rcall	.+12     	; 0x406 <__divmodhi4_neg1>
 3fa:	00 20       	and	r0, r0
 3fc:	1a f4       	brpl	.+6      	; 0x404 <__divmodhi4_exit>

000003fe <__divmodhi4_neg2>:
 3fe:	70 95       	com	r23
 400:	61 95       	neg	r22
 402:	7f 4f       	sbci	r23, 0xFF	; 255

00000404 <__divmodhi4_exit>:
 404:	08 95       	ret

00000406 <__divmodhi4_neg1>:
 406:	f6 f7       	brtc	.-4      	; 0x404 <__divmodhi4_exit>
 408:	90 95       	com	r25
 40a:	81 95       	neg	r24
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__udivmodhi4>:
 410:	aa 1b       	sub	r26, r26
 412:	bb 1b       	sub	r27, r27
 414:	51 e1       	ldi	r21, 0x11	; 17
 416:	07 c0       	rjmp	.+14     	; 0x426 <__udivmodhi4_ep>

00000418 <__udivmodhi4_loop>:
 418:	aa 1f       	adc	r26, r26
 41a:	bb 1f       	adc	r27, r27
 41c:	a6 17       	cp	r26, r22
 41e:	b7 07       	cpc	r27, r23
 420:	10 f0       	brcs	.+4      	; 0x426 <__udivmodhi4_ep>
 422:	a6 1b       	sub	r26, r22
 424:	b7 0b       	sbc	r27, r23

00000426 <__udivmodhi4_ep>:
 426:	88 1f       	adc	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	5a 95       	dec	r21
 42c:	a9 f7       	brne	.-22     	; 0x418 <__udivmodhi4_loop>
 42e:	80 95       	com	r24
 430:	90 95       	com	r25
 432:	bc 01       	movw	r22, r24
 434:	cd 01       	movw	r24, r26
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
