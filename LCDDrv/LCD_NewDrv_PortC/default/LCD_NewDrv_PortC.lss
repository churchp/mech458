
LCD_NewDrv_PortC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000003fe  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000091  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006ff  00000000  00000000  00000585  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000231  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000502  00000000  00000000  00000eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000176  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000036b  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  8c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  90:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  94:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee ef       	ldi	r30, 0xFE	; 254
  ac:	f3 e0       	ldi	r31, 0x03	; 3
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a2 34       	cpi	r26, 0x42	; 66
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>
  be:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  c2:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <mTimer>:

#include "lcd.h"


void mTimer (int count)
{
  ca:	9c 01       	movw	r18, r24
   int i;

   i = 0;

   TCCR1B |= _BV (CS10);  //  sets prescalar to DIV 1
  cc:	80 91 81 00 	lds	r24, 0x0081
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 93 81 00 	sts	0x0081, r24
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
  d6:	80 91 81 00 	lds	r24, 0x0081
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 93 81 00 	sts	0x0081, r24

   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
  e0:	88 ee       	ldi	r24, 0xE8	; 232
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	90 93 89 00 	sts	0x0089, r25
  e8:	80 93 88 00 	sts	0x0088, r24
 
   /* Initialize Timer 1 to zero */
   TCNT1 = 0x0000;
  ec:	10 92 85 00 	sts	0x0085, r1
  f0:	10 92 84 00 	sts	0x0084, r1

   /* Enable the output compare interrupt */
   //TIMSK1 |= _BV(OCIE1A);  //remove if global interrups is set (sei())

   /* Clear the timer interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
  f4:	b1 9a       	sbi	0x16, 1	; 22
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	04 c0       	rjmp	.+8      	; 0x104 <mTimer+0x3a>

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
   {
      while ((TIFR1 & 0x02) != 0x02);
  fc:	b1 9b       	sbis	0x16, 1	; 22
  fe:	fe cf       	rjmp	.-4      	; 0xfc <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 100:	b1 9a       	sbi	0x16, 1	; 22
	   i++;
 102:	01 96       	adiw	r24, 0x01	; 1

   /* Clear the timer interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
 104:	82 17       	cp	r24, r18
 106:	93 07       	cpc	r25, r19
 108:	cc f3       	brlt	.-14     	; 0xfc <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
	   i++;
   } /* while */
   TCCR1B &= ~_BV (CS10);  //  disable prescalar
 10a:	80 91 81 00 	lds	r24, 0x0081
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	80 93 81 00 	sts	0x0081, r24
   return;
}  /* mTimer */
 114:	08 95       	ret

00000116 <main>:



int main(int argc,char*argv[])
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
	unsigned char i;

	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	0e 94 36 01 	call	0x26c	; 0x26c <InitLCD>

	//Clear the screen
	LCDClear();
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>

	//Simple string printing
	LCDWriteString("Congrats ");
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCDWriteString>
	
	//A string on line 2
	LCDWriteStringXY(0,1,"Loading ");
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	0e 94 cd 01 	call	0x39a	; 0x39a <LCDGotoXY>
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCDWriteString>
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	d0 e0       	ldi	r29, 0x00	; 0

	//Print some numbers
	for (i=0;i<99;i+=1)
	{
		LCDWriteIntXY(9,1,i,3);
 144:	89 e0       	ldi	r24, 0x09	; 9
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	0e 94 cd 01 	call	0x39a	; 0x39a <LCDGotoXY>
 14c:	ce 01       	movw	r24, r28
 14e:	63 e0       	ldi	r22, 0x03	; 3
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 6f 01 	call	0x2de	; 0x2de <LCDWriteInt>
		LCDWriteStringXY(12,1,"%");
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	0e 94 cd 01 	call	0x39a	; 0x39a <LCDGotoXY>
 15e:	83 e1       	ldi	r24, 0x13	; 19
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCDWriteString>
		//_delay_loop_2(0);	
		//_delay_loop_2(0);	
		//_delay_loop_2(0);	
		//_delay_loop_2(0);	

      mTimer(1000);
 166:	88 ee       	ldi	r24, 0xE8	; 232
 168:	93 e0       	ldi	r25, 0x03	; 3
 16a:	0e 94 65 00 	call	0xca	; 0xca <mTimer>
 16e:	21 96       	adiw	r28, 0x01	; 1
	
	//A string on line 2
	LCDWriteStringXY(0,1,"Loading ");

	//Print some numbers
	for (i=0;i<99;i+=1)
 170:	c3 36       	cpi	r28, 0x63	; 99
 172:	d1 05       	cpc	r29, r1
 174:	39 f7       	brne	.-50     	; 0x144 <main+0x2e>

      mTimer(1000);
	}

	//Clear the screen
	LCDClear();
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>

	//Some more text

	LCDWriteString("Hello world");
 17e:	85 e1       	ldi	r24, 0x15	; 21
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCDWriteString>
	LCDWriteStringXY(0,1,"By Pat");		// <--- Write ur NAME HERE !!!!!!!!!!!
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	0e 94 cd 01 	call	0x39a	; 0x39a <LCDGotoXY>
 18e:	81 e2       	ldi	r24, 0x21	; 33
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCDWriteString>

	//Wait ~ 25 secs
	//for(i=0;i<100;i++) _delay_loop_2(0);
   mTimer (25000);
 196:	88 ea       	ldi	r24, 0xA8	; 168
 198:	91 e6       	ldi	r25, 0x61	; 97
 19a:	0e 94 65 00 	call	0xca	; 0xca <mTimer>

	//Some More ......
	LCDClear();
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
	LCDWriteString("    eXtreme");
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCDWriteString>
	LCDWriteStringXY(0,1,"  Electronics");
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	0e 94 cd 01 	call	0x39a	; 0x39a <LCDGotoXY>
 1b6:	84 e3       	ldi	r24, 0x34	; 52
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCDWriteString>

   return(0);

}
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 1c8:	87 b1       	in	r24, 0x07	; 7
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 1ce:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 1d0:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	47 9a       	sbi	0x08, 7	; 8
 1dc:	82 2f       	mov	r24, r18
 1de:	8a 95       	dec	r24
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 1e2:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 1e4:	82 95       	swap	r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	92 2f       	mov	r25, r18
 1ea:	9a 95       	dec	r25
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1ee:	47 98       	cbi	0x08, 7	; 8
 1f0:	92 2f       	mov	r25, r18
 1f2:	9a 95       	dec	r25
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 1f6:	47 9a       	sbi	0x08, 7	; 8
 1f8:	92 2f       	mov	r25, r18
 1fa:	9a 95       	dec	r25
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 1fe:	96 b1       	in	r25, 0x06	; 6
 200:	92 2f       	mov	r25, r18
 202:	9a 95       	dec	r25
 204:	f1 f7       	brne	.-4      	; 0x202 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 206:	47 98       	cbi	0x08, 7	; 8
 208:	92 2f       	mov	r25, r18
 20a:	9a 95       	dec	r25
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 20e:	87 fd       	sbrc	r24, 7
 210:	e4 cf       	rjmp	.-56     	; 0x1da <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 212:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 214:	87 b1       	in	r24, 0x07	; 7
 216:	8f 60       	ori	r24, 0x0F	; 15
 218:	87 b9       	out	0x07, r24	; 7

}
 21a:	08 95       	ret

0000021c <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 21c:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 21e:	66 23       	and	r22, r22
 220:	11 f4       	brne	.+4      	; 0x226 <LCDByte+0xa>
	CLEAR_RS();
 222:	46 98       	cbi	0x08, 6	; 8
 224:	01 c0       	rjmp	.+2      	; 0x228 <LCDByte+0xc>
else
	SET_RS();
 226:	46 9a       	sbi	0x08, 6	; 8
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	82 2f       	mov	r24, r18
 22c:	8a 95       	dec	r24
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 230:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 232:	88 b1       	in	r24, 0x08	; 8
 234:	93 2f       	mov	r25, r19
 236:	92 95       	swap	r25
 238:	9f 70       	andi	r25, 0x0F	; 15
 23a:	80 7f       	andi	r24, 0xF0	; 240
 23c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 23e:	98 b9       	out	0x08, r25	; 8
 240:	82 2f       	mov	r24, r18
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 246:	47 98       	cbi	0x08, 7	; 8
 248:	82 2f       	mov	r24, r18
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 24e:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 250:	88 b1       	in	r24, 0x08	; 8
 252:	3f 70       	andi	r19, 0x0F	; 15
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 258:	88 b9       	out	0x08, r24	; 8
 25a:	82 2f       	mov	r24, r18
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 260:	47 98       	cbi	0x08, 7	; 8
 262:	2a 95       	dec	r18
 264:	f1 f7       	brne	.-4      	; 0x262 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 266:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCDBusyLoop>
}
 26a:	08 95       	ret

0000026c <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 26c:	1f 93       	push	r17
 26e:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 270:	8c e4       	ldi	r24, 0x4C	; 76
 272:	9d e1       	ldi	r25, 0x1D	; 29
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 278:	87 b1       	in	r24, 0x07	; 7
 27a:	8f 60       	ori	r24, 0x0F	; 15
 27c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 27e:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 280:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 282:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 284:	88 b1       	in	r24, 0x08	; 8
 286:	80 7f       	andi	r24, 0xF0	; 240
 288:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 28a:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 28c:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 28e:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	98 2f       	mov	r25, r24
 294:	9a 95       	dec	r25
 296:	f1 f7       	brne	.-4      	; 0x294 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 298:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 29a:	41 9a       	sbi	0x08, 1	; 8
 29c:	98 2f       	mov	r25, r24
 29e:	9a 95       	dec	r25
 2a0:	f1 f7       	brne	.-4      	; 0x29e <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 2a2:	47 98       	cbi	0x08, 7	; 8
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 2a8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 2ac:	81 2f       	mov	r24, r17
 2ae:	8c 60       	ori	r24, 0x0C	; 12
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 2b6:	88 e2       	ldi	r24, 0x28	; 40
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
}
 2be:	1f 91       	pop	r17
 2c0:	08 95       	ret

000002c2 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	ec 01       	movw	r28, r24
 2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
	msg++;
 2d0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2d2:	88 81       	ld	r24, Y
 2d4:	88 23       	and	r24, r24
 2d6:	c9 f7       	brne	.-14     	; 0x2ca <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	df 93       	push	r29
 2e8:	cf 93       	push	r28
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <LCDWriteInt+0xe>
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <LCDWriteInt+0x10>
 2ee:	0f 92       	push	r0
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	9c 01       	movw	r18, r24
 2f6:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2f8:	fe 01       	movw	r30, r28
 2fa:	31 96       	adiw	r30, 0x01	; 1
 2fc:	85 e0       	ldi	r24, 0x05	; 5
 2fe:	df 01       	movw	r26, r30
 300:	1d 92       	st	X+, r1
 302:	8a 95       	dec	r24
 304:	e9 f7       	brne	.-6      	; 0x300 <LCDWriteInt+0x22>
 306:	fe 01       	movw	r30, r28
 308:	35 96       	adiw	r30, 0x05	; 5
 30a:	0d c0       	rjmp	.+26     	; 0x326 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 30c:	c9 01       	movw	r24, r18
 30e:	6a e0       	ldi	r22, 0x0A	; 10
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
 316:	80 83       	st	Z, r24
	val=val/10;
 318:	c9 01       	movw	r24, r18
 31a:	6a e0       	ldi	r22, 0x0A	; 10
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
 322:	9b 01       	movw	r18, r22
 324:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 326:	21 15       	cp	r18, r1
 328:	31 05       	cpc	r19, r1
 32a:	81 f7       	brne	.-32     	; 0x30c <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 32c:	bf ef       	ldi	r27, 0xFF	; 255
 32e:	0f 3f       	cpi	r16, 0xFF	; 255
 330:	1b 07       	cpc	r17, r27
 332:	79 f4       	brne	.+30     	; 0x352 <LCDWriteInt+0x74>
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 338:	ae 01       	movw	r20, r28
 33a:	4f 5f       	subi	r20, 0xFF	; 255
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	02 c0       	rjmp	.+4      	; 0x344 <LCDWriteInt+0x66>
 340:	2f 5f       	subi	r18, 0xFF	; 255
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	fa 01       	movw	r30, r20
 346:	e2 0f       	add	r30, r18
 348:	f3 1f       	adc	r31, r19
 34a:	80 81       	ld	r24, Z
 34c:	88 23       	and	r24, r24
 34e:	c1 f3       	breq	.-16     	; 0x340 <LCDWriteInt+0x62>
 350:	04 c0       	rjmp	.+8      	; 0x35a <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 352:	25 e0       	ldi	r18, 0x05	; 5
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	20 1b       	sub	r18, r16
 358:	31 0b       	sbc	r19, r17
 35a:	7e 01       	movw	r14, r28
 35c:	08 94       	sec
 35e:	e1 1c       	adc	r14, r1
 360:	f1 1c       	adc	r15, r1
 362:	e2 0e       	add	r14, r18
 364:	f3 1e       	adc	r15, r19
 366:	89 01       	movw	r16, r18
 368:	09 c0       	rjmp	.+18     	; 0x37c <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 36a:	f7 01       	movw	r30, r14
 36c:	81 91       	ld	r24, Z+
 36e:	7f 01       	movw	r14, r30
 370:	80 5d       	subi	r24, 0xD0	; 208
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 378:	0f 5f       	subi	r16, 0xFF	; 255
 37a:	1f 4f       	sbci	r17, 0xFF	; 255
 37c:	05 30       	cpi	r16, 0x05	; 5
 37e:	11 05       	cpc	r17, r1
 380:	a4 f3       	brlt	.-24     	; 0x36a <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	08 95       	ret

0000039a <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 39a:	88 32       	cpi	r24, 0x28	; 40
 39c:	30 f4       	brcc	.+12     	; 0x3aa <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 39e:	61 11       	cpse	r22, r1
 3a0:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
 3aa:	08 95       	ret

000003ac <__divmodhi4>:
 3ac:	97 fb       	bst	r25, 7
 3ae:	09 2e       	mov	r0, r25
 3b0:	07 26       	eor	r0, r23
 3b2:	0a d0       	rcall	.+20     	; 0x3c8 <__divmodhi4_neg1>
 3b4:	77 fd       	sbrc	r23, 7
 3b6:	04 d0       	rcall	.+8      	; 0x3c0 <__divmodhi4_neg2>
 3b8:	0c d0       	rcall	.+24     	; 0x3d2 <__udivmodhi4>
 3ba:	06 d0       	rcall	.+12     	; 0x3c8 <__divmodhi4_neg1>
 3bc:	00 20       	and	r0, r0
 3be:	1a f4       	brpl	.+6      	; 0x3c6 <__divmodhi4_exit>

000003c0 <__divmodhi4_neg2>:
 3c0:	70 95       	com	r23
 3c2:	61 95       	neg	r22
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255

000003c6 <__divmodhi4_exit>:
 3c6:	08 95       	ret

000003c8 <__divmodhi4_neg1>:
 3c8:	f6 f7       	brtc	.-4      	; 0x3c6 <__divmodhi4_exit>
 3ca:	90 95       	com	r25
 3cc:	81 95       	neg	r24
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
 3d0:	08 95       	ret

000003d2 <__udivmodhi4>:
 3d2:	aa 1b       	sub	r26, r26
 3d4:	bb 1b       	sub	r27, r27
 3d6:	51 e1       	ldi	r21, 0x11	; 17
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <__udivmodhi4_ep>

000003da <__udivmodhi4_loop>:
 3da:	aa 1f       	adc	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	a6 17       	cp	r26, r22
 3e0:	b7 07       	cpc	r27, r23
 3e2:	10 f0       	brcs	.+4      	; 0x3e8 <__udivmodhi4_ep>
 3e4:	a6 1b       	sub	r26, r22
 3e6:	b7 0b       	sbc	r27, r23

000003e8 <__udivmodhi4_ep>:
 3e8:	88 1f       	adc	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	5a 95       	dec	r21
 3ee:	a9 f7       	brne	.-22     	; 0x3da <__udivmodhi4_loop>
 3f0:	80 95       	com	r24
 3f2:	90 95       	com	r25
 3f4:	bc 01       	movw	r22, r24
 3f6:	cd 01       	movw	r24, r26
 3f8:	08 95       	ret

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
