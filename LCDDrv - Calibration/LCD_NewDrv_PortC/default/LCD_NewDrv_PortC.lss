
LCD_NewDrv_PortC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800106  00800106  000004f0  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000dd  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000865  00000000  00000000  0000060d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ea  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000619  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ea  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036b  00000000  00000000  00001a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_29>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 e5       	ldi	r30, 0x56	; 86
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 30       	cpi	r26, 0x06	; 6
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a6 e0       	ldi	r26, 0x06	; 6
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ad 30       	cpi	r26, 0x0D	; 13
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  d2:	0c 94 29 02 	jmp	0x452	; 0x452 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <__vector_29>:


// the interrupt will be trigured if the ADC is done
ISR(ADC_vect)

{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	0b b6       	in	r0, 0x3b	; 59
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
    ADCSRA |= _BV(ADSC);
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
    ADC_result = ADC;  //%%%%%%%%%%%%%%%%%%%%%%%%%%%
  fa:	80 91 78 00 	lds	r24, 0x0078
  fe:	90 91 79 00 	lds	r25, 0x0079
 102:	90 93 09 01 	sts	0x0109, r25
 106:	80 93 08 01 	sts	0x0108, r24
    //ADC_result_flag = 1;

}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0b be       	out	0x3b, r0	; 59
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <ADCsetup>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 120:	f8 94       	cli
            // by default, the ADC input (analog input is set to be ADC0 / PORTF0
        ADCSRA |= _BV(ADEN); // enable ADC
        ADCSRA |= _BV(ADIE); // enable interrupt of ADC
        ADMUX |=  _BV(REFS0); */

        ADCSRA |= _BV(ADEN);
 122:	aa e7       	ldi	r26, 0x7A	; 122
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	8c 91       	ld	r24, X
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8c 93       	st	X, r24
        ADMUX |= _BV(REFS0);
 12c:	ec e7       	ldi	r30, 0x7C	; 124
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
        ADMUX |= _BV(MUX0);
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
        ADCSRA |= _BV(ADSC);
 13c:	8c 91       	ld	r24, X
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	8c 93       	st	X, r24
        ADCSRA |= _BV(ADIE);
 142:	8c 91       	ld	r24, X
 144:	88 60       	ori	r24, 0x08	; 8
 146:	8c 93       	st	X, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 148:	78 94       	sei

    }

}
 14a:	08 95       	ret

0000014c <mTimer>:


void mTimer (int count)
{
 14c:	9c 01       	movw	r18, r24
   int i;

   i = 0;

   TCCR1B |= _BV (CS10);  //  sets prescalar to DIV 1
 14e:	80 91 81 00 	lds	r24, 0x0081
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 93 81 00 	sts	0x0081, r24
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 158:	80 91 81 00 	lds	r24, 0x0081
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	80 93 81 00 	sts	0x0081, r24

   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 162:	88 ee       	ldi	r24, 0xE8	; 232
 164:	93 e0       	ldi	r25, 0x03	; 3
 166:	90 93 89 00 	sts	0x0089, r25
 16a:	80 93 88 00 	sts	0x0088, r24
 
   /* Initialize Timer 1 to zero */
   TCNT1 = 0x0000;
 16e:	10 92 85 00 	sts	0x0085, r1
 172:	10 92 84 00 	sts	0x0084, r1

   /* Enable the output compare interrupt */
   //TIMSK1 |= _BV(OCIE1A);  //remove if global interrups is set (sei())

   /* Clear the timer interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 176:	b1 9a       	sbi	0x16, 1	; 22
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	04 c0       	rjmp	.+8      	; 0x186 <mTimer+0x3a>

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
   {
      while ((TIFR1 & 0x02) != 0x02);
 17e:	b1 9b       	sbis	0x16, 1	; 22
 180:	fe cf       	rjmp	.-4      	; 0x17e <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 182:	b1 9a       	sbi	0x16, 1	; 22
	   i++;
 184:	01 96       	adiw	r24, 0x01	; 1

   /* Clear the timer interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
 186:	82 17       	cp	r24, r18
 188:	93 07       	cpc	r25, r19
 18a:	cc f3       	brlt	.-14     	; 0x17e <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
	   i++;
   } /* while */
   TCCR1B &= ~_BV (CS10);  //  disable prescalar
 18c:	80 91 81 00 	lds	r24, 0x0081
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	80 93 81 00 	sts	0x0081, r24
   return;
}  /* mTimer */
 196:	08 95       	ret

00000198 <main>:
unsigned int i;
//unsigned int j;

int main(int argc,char*argv[])
{
	DDRD = 0b11111011;
 198:	8b ef       	ldi	r24, 0xFB	; 251
 19a:	8a b9       	out	0x0a, r24	; 10
    ADCsetup();
 19c:	0e 94 90 00 	call	0x120	; 0x120 <ADCsetup>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1a0:	f8 94       	cli

    ATOMIC_BLOCK(ATOMIC_FORCEON){
	
        //Initialize LCD module
	    InitLCD(LS_BLINK|LS_ULINE);
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <InitLCD>

	    //Clear the screen
	    LCDClear();  
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	0e 94 3a 01 	call	0x274	; 0x274 <LCDByte>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 1b0:	78 94       	sei
    	
    }

    
   i = 10;
 1b2:	8a e0       	ldi	r24, 0x0A	; 10
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 0c 01 	sts	0x010C, r25
 1ba:	80 93 0b 01 	sts	0x010B, r24

    while(1){
        
        mTimer(1000);
 1be:	88 ee       	ldi	r24, 0xE8	; 232
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	0e 94 a6 00 	call	0x14c	; 0x14c <mTimer>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1c6:	f8 94       	cli
        
        ATOMIC_BLOCK(ATOMIC_FORCEON){
    	    
            i = ADC_result; 
 1c8:	80 91 08 01 	lds	r24, 0x0108
 1cc:	90 91 09 01 	lds	r25, 0x0109
 1d0:	90 93 0c 01 	sts	0x010C, r25
 1d4:	80 93 0b 01 	sts	0x010B, r24
            //i = i + 5;
            
        	LCDWriteStringXY(0,0,"ADC:");
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCDGotoXY>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 8d 01 	call	0x31a	; 0x31a <LCDWriteString>
            LCDWriteIntXY(6,0,i,4);
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCDGotoXY>
 1f0:	80 91 0b 01 	lds	r24, 0x010B
 1f4:	90 91 0c 01 	lds	r25, 0x010C
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	0e 94 9b 01 	call	0x336	; 0x336 <LCDWriteInt>
            //LCDWriteStringXY(0,1,"ADCL:");
            //LCDWriteIntXY(6,1,j,4);
            mTimer(200);	
 200:	88 ec       	ldi	r24, 0xC8	; 200
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 a6 00 	call	0x14c	; 0x14c <mTimer>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 208:	78 94       	sei

        }
        
        

        if(ADC_result_flag) ADC_result_flag = 0;
 20a:	80 91 06 01 	lds	r24, 0x0106
 20e:	90 91 07 01 	lds	r25, 0x0107
 212:	89 2b       	or	r24, r25
 214:	a1 f2       	breq	.-88     	; 0x1be <main+0x26>
 216:	10 92 07 01 	sts	0x0107, r1
 21a:	10 92 06 01 	sts	0x0106, r1
 21e:	cf cf       	rjmp	.-98     	; 0x1be <main+0x26>

00000220 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 220:	87 b1       	in	r24, 0x07	; 7
 222:	80 7f       	andi	r24, 0xF0	; 240
 224:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 226:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 228:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	8a 95       	dec	r24
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	47 9a       	sbi	0x08, 7	; 8
 234:	82 2f       	mov	r24, r18
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 23a:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 23c:	82 95       	swap	r24
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	92 2f       	mov	r25, r18
 242:	9a 95       	dec	r25
 244:	f1 f7       	brne	.-4      	; 0x242 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 246:	47 98       	cbi	0x08, 7	; 8
 248:	92 2f       	mov	r25, r18
 24a:	9a 95       	dec	r25
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 24e:	47 9a       	sbi	0x08, 7	; 8
 250:	92 2f       	mov	r25, r18
 252:	9a 95       	dec	r25
 254:	f1 f7       	brne	.-4      	; 0x252 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 256:	96 b1       	in	r25, 0x06	; 6
 258:	92 2f       	mov	r25, r18
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 25e:	47 98       	cbi	0x08, 7	; 8
 260:	92 2f       	mov	r25, r18
 262:	9a 95       	dec	r25
 264:	f1 f7       	brne	.-4      	; 0x262 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 266:	87 fd       	sbrc	r24, 7
 268:	e4 cf       	rjmp	.-56     	; 0x232 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 26a:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 26c:	87 b1       	in	r24, 0x07	; 7
 26e:	8f 60       	ori	r24, 0x0F	; 15
 270:	87 b9       	out	0x07, r24	; 7

}
 272:	08 95       	ret

00000274 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 274:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 276:	66 23       	and	r22, r22
 278:	11 f4       	brne	.+4      	; 0x27e <LCDByte+0xa>
	CLEAR_RS();
 27a:	46 98       	cbi	0x08, 6	; 8
 27c:	01 c0       	rjmp	.+2      	; 0x280 <LCDByte+0xc>
else
	SET_RS();
 27e:	46 9a       	sbi	0x08, 6	; 8
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	82 2f       	mov	r24, r18
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 288:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 28a:	88 b1       	in	r24, 0x08	; 8
 28c:	93 2f       	mov	r25, r19
 28e:	92 95       	swap	r25
 290:	9f 70       	andi	r25, 0x0F	; 15
 292:	80 7f       	andi	r24, 0xF0	; 240
 294:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 296:	98 b9       	out	0x08, r25	; 8
 298:	82 2f       	mov	r24, r18
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 29e:	47 98       	cbi	0x08, 7	; 8
 2a0:	82 2f       	mov	r24, r18
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 2a6:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 2a8:	88 b1       	in	r24, 0x08	; 8
 2aa:	3f 70       	andi	r19, 0x0F	; 15
 2ac:	80 7f       	andi	r24, 0xF0	; 240
 2ae:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 2b0:	88 b9       	out	0x08, r24	; 8
 2b2:	82 2f       	mov	r24, r18
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 2b8:	47 98       	cbi	0x08, 7	; 8
 2ba:	2a 95       	dec	r18
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 2be:	0e 94 10 01 	call	0x220	; 0x220 <LCDBusyLoop>
}
 2c2:	08 95       	ret

000002c4 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 2c4:	1f 93       	push	r17
 2c6:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c8:	8c e4       	ldi	r24, 0x4C	; 76
 2ca:	9d e1       	ldi	r25, 0x1D	; 29
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 2d0:	87 b1       	in	r24, 0x07	; 7
 2d2:	8f 60       	ori	r24, 0x0F	; 15
 2d4:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 2d6:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 2d8:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 2da:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	80 7f       	andi	r24, 0xF0	; 240
 2e0:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 2e2:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 2e4:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 2e6:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	98 2f       	mov	r25, r24
 2ec:	9a 95       	dec	r25
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 2f0:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 2f2:	41 9a       	sbi	0x08, 1	; 8
 2f4:	98 2f       	mov	r25, r24
 2f6:	9a 95       	dec	r25
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 2fa:	47 98       	cbi	0x08, 7	; 8
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 300:	0e 94 10 01 	call	0x220	; 0x220 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 304:	81 2f       	mov	r24, r17
 306:	8c 60       	ori	r24, 0x0C	; 12
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	0e 94 3a 01 	call	0x274	; 0x274 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 30e:	88 e2       	ldi	r24, 0x28	; 40
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	0e 94 3a 01 	call	0x274	; 0x274 <LCDByte>
}
 316:	1f 91       	pop	r17
 318:	08 95       	ret

0000031a <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
 320:	04 c0       	rjmp	.+8      	; 0x32a <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	0e 94 3a 01 	call	0x274	; 0x274 <LCDByte>
	msg++;
 328:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 32a:	88 81       	ld	r24, Y
 32c:	88 23       	and	r24, r24
 32e:	c9 f7       	brne	.-14     	; 0x322 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	df 93       	push	r29
 340:	cf 93       	push	r28
 342:	00 d0       	rcall	.+0      	; 0x344 <LCDWriteInt+0xe>
 344:	00 d0       	rcall	.+0      	; 0x346 <LCDWriteInt+0x10>
 346:	0f 92       	push	r0
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	9c 01       	movw	r18, r24
 34e:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 350:	fe 01       	movw	r30, r28
 352:	31 96       	adiw	r30, 0x01	; 1
 354:	85 e0       	ldi	r24, 0x05	; 5
 356:	df 01       	movw	r26, r30
 358:	1d 92       	st	X+, r1
 35a:	8a 95       	dec	r24
 35c:	e9 f7       	brne	.-6      	; 0x358 <LCDWriteInt+0x22>
 35e:	fe 01       	movw	r30, r28
 360:	35 96       	adiw	r30, 0x05	; 5
 362:	0d c0       	rjmp	.+26     	; 0x37e <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 364:	c9 01       	movw	r24, r18
 366:	6a e0       	ldi	r22, 0x0A	; 10
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	0e 94 02 02 	call	0x404	; 0x404 <__divmodhi4>
 36e:	80 83       	st	Z, r24
	val=val/10;
 370:	c9 01       	movw	r24, r18
 372:	6a e0       	ldi	r22, 0x0A	; 10
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	0e 94 02 02 	call	0x404	; 0x404 <__divmodhi4>
 37a:	9b 01       	movw	r18, r22
 37c:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 37e:	21 15       	cp	r18, r1
 380:	31 05       	cpc	r19, r1
 382:	81 f7       	brne	.-32     	; 0x364 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 384:	bf ef       	ldi	r27, 0xFF	; 255
 386:	0f 3f       	cpi	r16, 0xFF	; 255
 388:	1b 07       	cpc	r17, r27
 38a:	79 f4       	brne	.+30     	; 0x3aa <LCDWriteInt+0x74>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 390:	ae 01       	movw	r20, r28
 392:	4f 5f       	subi	r20, 0xFF	; 255
 394:	5f 4f       	sbci	r21, 0xFF	; 255
 396:	02 c0       	rjmp	.+4      	; 0x39c <LCDWriteInt+0x66>
 398:	2f 5f       	subi	r18, 0xFF	; 255
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
 39c:	fa 01       	movw	r30, r20
 39e:	e2 0f       	add	r30, r18
 3a0:	f3 1f       	adc	r31, r19
 3a2:	80 81       	ld	r24, Z
 3a4:	88 23       	and	r24, r24
 3a6:	c1 f3       	breq	.-16     	; 0x398 <LCDWriteInt+0x62>
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 3aa:	25 e0       	ldi	r18, 0x05	; 5
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	20 1b       	sub	r18, r16
 3b0:	31 0b       	sbc	r19, r17
 3b2:	7e 01       	movw	r14, r28
 3b4:	08 94       	sec
 3b6:	e1 1c       	adc	r14, r1
 3b8:	f1 1c       	adc	r15, r1
 3ba:	e2 0e       	add	r14, r18
 3bc:	f3 1e       	adc	r15, r19
 3be:	89 01       	movw	r16, r18
 3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 3c2:	f7 01       	movw	r30, r14
 3c4:	81 91       	ld	r24, Z+
 3c6:	7f 01       	movw	r14, r30
 3c8:	80 5d       	subi	r24, 0xD0	; 208
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	0e 94 3a 01 	call	0x274	; 0x274 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 3d0:	0f 5f       	subi	r16, 0xFF	; 255
 3d2:	1f 4f       	sbci	r17, 0xFF	; 255
 3d4:	05 30       	cpi	r16, 0x05	; 5
 3d6:	11 05       	cpc	r17, r1
 3d8:	a4 f3       	brlt	.-24     	; 0x3c2 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	cf 91       	pop	r28
 3e6:	df 91       	pop	r29
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	ef 90       	pop	r14
 3f0:	08 95       	ret

000003f2 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 3f2:	88 32       	cpi	r24, 0x28	; 40
 3f4:	30 f4       	brcc	.+12     	; 0x402 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 3f6:	61 11       	cpse	r22, r1
 3f8:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 3fa:	80 68       	ori	r24, 0x80	; 128
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	0e 94 3a 01 	call	0x274	; 0x274 <LCDByte>
 402:	08 95       	ret

00000404 <__divmodhi4>:
 404:	97 fb       	bst	r25, 7
 406:	09 2e       	mov	r0, r25
 408:	07 26       	eor	r0, r23
 40a:	0a d0       	rcall	.+20     	; 0x420 <__divmodhi4_neg1>
 40c:	77 fd       	sbrc	r23, 7
 40e:	04 d0       	rcall	.+8      	; 0x418 <__divmodhi4_neg2>
 410:	0c d0       	rcall	.+24     	; 0x42a <__udivmodhi4>
 412:	06 d0       	rcall	.+12     	; 0x420 <__divmodhi4_neg1>
 414:	00 20       	and	r0, r0
 416:	1a f4       	brpl	.+6      	; 0x41e <__divmodhi4_exit>

00000418 <__divmodhi4_neg2>:
 418:	70 95       	com	r23
 41a:	61 95       	neg	r22
 41c:	7f 4f       	sbci	r23, 0xFF	; 255

0000041e <__divmodhi4_exit>:
 41e:	08 95       	ret

00000420 <__divmodhi4_neg1>:
 420:	f6 f7       	brtc	.-4      	; 0x41e <__divmodhi4_exit>
 422:	90 95       	com	r25
 424:	81 95       	neg	r24
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	08 95       	ret

0000042a <__udivmodhi4>:
 42a:	aa 1b       	sub	r26, r26
 42c:	bb 1b       	sub	r27, r27
 42e:	51 e1       	ldi	r21, 0x11	; 17
 430:	07 c0       	rjmp	.+14     	; 0x440 <__udivmodhi4_ep>

00000432 <__udivmodhi4_loop>:
 432:	aa 1f       	adc	r26, r26
 434:	bb 1f       	adc	r27, r27
 436:	a6 17       	cp	r26, r22
 438:	b7 07       	cpc	r27, r23
 43a:	10 f0       	brcs	.+4      	; 0x440 <__udivmodhi4_ep>
 43c:	a6 1b       	sub	r26, r22
 43e:	b7 0b       	sbc	r27, r23

00000440 <__udivmodhi4_ep>:
 440:	88 1f       	adc	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	5a 95       	dec	r21
 446:	a9 f7       	brne	.-22     	; 0x432 <__udivmodhi4_loop>
 448:	80 95       	com	r24
 44a:	90 95       	com	r25
 44c:	bc 01       	movw	r22, r24
 44e:	cd 01       	movw	r24, r26
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
