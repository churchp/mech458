
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  0000031a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c3  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001fe  00000000  00000000  000003fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e7  00000000  00000000  000005fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000024d  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000115  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000090  00000000  00000000  00000af5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_2>
   c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_3>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_29>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 ea       	ldi	r30, 0xA6	; 166
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a5 30       	cpi	r26, 0x05	; 5
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  d2:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <DCmotor>:
}


void DCmotor(int direction, int brakeHigh)  //direction 1 = CW, direction 0 = CCW, brakeHigh 1 = brake to DC
{
    if(brakeHigh){
  da:	67 2b       	or	r22, r23
  dc:	11 f0       	breq	.+4      	; 0xe2 <DCmotor+0x8>
        PORTF = ~0x0F;       //Brake DC motor to Vcc
  de:	80 ef       	ldi	r24, 0xF0	; 240
  e0:	05 c0       	rjmp	.+10     	; 0xec <DCmotor+0x12>
    }
    else if(direction){
  e2:	89 2b       	or	r24, r25
  e4:	11 f0       	breq	.+4      	; 0xea <DCmotor+0x10>
        PORTF = ~0x0B; 		//Run DC motor clockwise
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	01 c0       	rjmp	.+2      	; 0xec <DCmotor+0x12>
    }
    else if(direction == 0){
        PORTF = ~0x07; 		//Run DC motor counter-clockwise
  ea:	88 ef       	ldi	r24, 0xF8	; 248
  ec:	81 bb       	out	0x11, r24	; 17
  ee:	08 95       	ret

000000f0 <buttonSetup>:
    }
}

void buttonSetup()
{
    cli();  // disable all of the interrupt
  f0:	f8 94       	cli
            // config the external interrupt
    EIMSK |= (_BV(INT1)); // enable INT1
  f2:	e9 9a       	sbi	0x1d, 1	; 29
    EICRA |= (_BV(ISC11) | _BV(ISC10)); // rising edge interrupt
  f4:	e9 e6       	ldi	r30, 0x69	; 105
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8c 60       	ori	r24, 0x0C	; 12
  fc:	80 83       	st	Z, r24
}
  fe:	08 95       	ret

00000100 <PWMsetup>:

void PWMsetup() // Sets up the PWN - only needs to be called once 
{
    TCCR0A |= 0x83;             //Set Waveform Generator to mode to Fast PWM   
 100:	84 b5       	in	r24, 0x24	; 36
 102:	83 68       	ori	r24, 0x83	; 131
 104:	84 bd       	out	0x24, r24	; 36
    TIMSK0 = TIMSK0 | 0b00000010;
 106:	ee e6       	ldi	r30, 0x6E	; 110
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
    TCCR0B = 0b00000010;        //Clock scaling by 1/8
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0b10000000;         //Duty cycle set to 50%
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	87 bd       	out	0x27, r24	; 39
           
   
}//end PWMsetup
 118:	08 95       	ret

0000011a <PWM>:

void PWM(int dutyCycle) //%%%%%%%%%%%%%%%%%%%%%%
{
    OCR0A = dutyCycle;
 11a:	87 bd       	out	0x27, r24	; 39
}
 11c:	08 95       	ret

0000011e <ADCsetup>:

void ADCsetup() // Sets up the ADC - only needs to be called once 
{

    cli();  // disable all of the interrupt
 11e:	f8 94       	cli
            // config the external interrupt
    EIMSK |= (_BV(INT2)); // enable INT2
 120:	ea 9a       	sbi	0x1d, 2	; 29
    EICRA |= (_BV(ISC21) | _BV(ISC20)); // rising edge interrupt
 122:	e9 e6       	ldi	r30, 0x69	; 105
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 63       	ori	r24, 0x30	; 48
 12a:	80 83       	st	Z, r24
        // config ADC
        // by default, the ADC input (analog input is set to be ADC0 / PORTF0
    ADCSRA |= _BV(ADEN); // enable ADC
 12c:	ea e7       	ldi	r30, 0x7A	; 122
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 68       	ori	r24, 0x80	; 128
 134:	80 83       	st	Z, r24
    ADCSRA |= _BV(ADIE); // enable interrupt of ADC
 136:	80 81       	ld	r24, Z
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	80 83       	st	Z, r24
    ADMUX |= (_BV(ADLAR) | _BV(REFS0)); 
 13c:	ec e7       	ldi	r30, 0x7C	; 124
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 66       	ori	r24, 0x60	; 96
 144:	80 83       	st	Z, r24

}
 146:	08 95       	ret

00000148 <main>:
//################## MAIN ROUTINE ##################


int main(int argc, char *argv[]){

    DDRA = 0xFF;            //lights
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	81 b9       	out	0x01, r24	; 1
    DDRF = 0xFF;           //Sets all PORT F pins to output (for the DC motor)
 14c:	80 bb       	out	0x10, r24	; 16
    DDRB = 0xFF;           //Sets all PORT B pins to output (for the pwm)
 14e:	84 b9       	out	0x04, r24	; 4
    DDRE = 0x00;           //Sets all PORT E pins to input (for motor choices)
 150:	1d b8       	out	0x0d, r1	; 13
    TCCR1B |= _BV(CS10);   //Initialize the timer control register, clock scaling CS10              
 152:	80 91 81 00 	lds	r24, 0x0081
 156:	81 60       	ori	r24, 0x01	; 1
 158:	80 93 81 00 	sts	0x0081, r24

    PWMsetup(); // calls PWMsetup function to ready the PWM for use 
 15c:	0e 94 80 00 	call	0x100	; 0x100 <PWMsetup>
    ADCsetup(); // calls ADCsetup function to ready the ADC for use 
 160:	0e 94 8f 00 	call	0x11e	; 0x11e <ADCsetup>

    sei(); // sets the Global Enable for all interrupts
 164:	78 94       	sei
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x1e>

00000168 <__vector_2>:
    ADMUX |= (_BV(ADLAR) | _BV(REFS0)); 

}

ISR(INT1_vect) //motor controlled by button
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	0b b6       	in	r0, 0x3b	; 59
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
    PORTA = 0x01;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	82 b9       	out	0x02, r24	; 2

    if(motorFlag) {
 192:	80 91 02 01 	lds	r24, 0x0102
 196:	90 91 03 01 	lds	r25, 0x0103
 19a:	89 2b       	or	r24, r25
 19c:	59 f0       	breq	.+22     	; 0x1b4 <__vector_2+0x4c>
    DCmotor(0,1);   //brake high (to Vcc)
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    motorFlag = 0;
 1aa:	10 92 03 01 	sts	0x0103, r1
 1ae:	10 92 02 01 	sts	0x0102, r1
 1b2:	12 c0       	rjmp	.+36     	; 0x1d8 <__vector_2+0x70>
    }
    else if (!motorFlag) {
 1b4:	80 91 02 01 	lds	r24, 0x0102
 1b8:	90 91 03 01 	lds	r25, 0x0103
 1bc:	89 2b       	or	r24, r25
 1be:	61 f4       	brne	.+24     	; 0x1d8 <__vector_2+0x70>
    DCmotor(1,0); 			//run motor CW
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    motorFlag = 1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	90 93 03 01 	sts	0x0103, r25
 1d4:	80 93 02 01 	sts	0x0102, r24
    }
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0b be       	out	0x3b, r0	; 59
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <__vector_3>:

ISR(INT2_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	0b b6       	in	r0, 0x3b	; 59
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
    ADCSRA |= _BV(ADSC); // when there is a rising edge, we need to do ADC
 212:	ea e7       	ldi	r30, 0x7A	; 122
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 64       	ori	r24, 0x40	; 64
 21a:	80 83       	st	Z, r24
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0b be       	out	0x3b, r0	; 59
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_29>:


// the interrupt will be trigured if the ADC is done
ISR(ADC_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
    ADC_result = ADCH;  //%%%%%%%%%%%%%%%%%%%%%%%%%%%
 23e:	80 91 79 00 	lds	r24, 0x0079
 242:	80 93 04 01 	sts	0x0104, r24
    ADC_result_flag = 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 01 01 	sts	0x0101, r25
 24e:	80 93 00 01 	sts	0x0100, r24
}
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <mTimer>:


void mTimer(int count)
{
 260:	9c 01       	movw	r18, r24
    int i = 0;                    // Loop counter
    TCCR1B |= _BV(WGM12);         // Set to Waveform Generator Mode 12 (Clear on Timer Compare)
 262:	80 91 81 00 	lds	r24, 0x0081
 266:	88 60       	ori	r24, 0x08	; 8
 268:	80 93 81 00 	sts	0x0081, r24
    OCR1A = 0x03E8;               // Set output compare register for 1000 cycles(1ms)
 26c:	88 ee       	ldi	r24, 0xE8	; 232
 26e:	93 e0       	ldi	r25, 0x03	; 3
 270:	90 93 89 00 	sts	0x0089, r25
 274:	80 93 88 00 	sts	0x0088, r24
    TCNT1 = 0x0000;               // Set initial counter timer time to 0
 278:	10 92 85 00 	sts	0x0085, r1
 27c:	10 92 84 00 	sts	0x0084, r1
    TIMSK1 = TIMSK1 | 0b00000010; // Enable output compare interrupt
 280:	80 91 6f 00 	lds	r24, 0x006F
 284:	82 60       	ori	r24, 0x02	; 2
 286:	80 93 6f 00 	sts	0x006F, r24
    TIFR1 |= _BV(OCF1A);          // Clear interrupt flag and start timer
 28a:	b1 9a       	sbi	0x16, 1	; 22
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	04 c0       	rjmp	.+8      	; 0x29a <mTimer+0x3a>

    //TODO: switch this to a real interrupt
    while (i < count)
    {
        //When the interrupt's flag is triggered
        if ((TIFR1 & 0x02) == 0x02)
 292:	b1 9b       	sbis	0x16, 1	; 22
 294:	fe cf       	rjmp	.-4      	; 0x292 <mTimer+0x32>
        {
            TIFR1 |= _BV(OCF1A); //Clear the flag
 296:	b1 9a       	sbi	0x16, 1	; 22
            i++;                 //increment the loop
 298:	01 96       	adiw	r24, 0x01	; 1
    TCNT1 = 0x0000;               // Set initial counter timer time to 0
    TIMSK1 = TIMSK1 | 0b00000010; // Enable output compare interrupt
    TIFR1 |= _BV(OCF1A);          // Clear interrupt flag and start timer

    //TODO: switch this to a real interrupt
    while (i < count)
 29a:	82 17       	cp	r24, r18
 29c:	93 07       	cpc	r25, r19
 29e:	cc f3       	brlt	.-14     	; 0x292 <mTimer+0x32>
            TIFR1 |= _BV(OCF1A); //Clear the flag
            i++;                 //increment the loop
        }
    }
    return;
}
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
