
ADCv3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  000002b4  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009e  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b4  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000103  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b0  00000000  00000000  00000629  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fa  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000068  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_2>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_4>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 e4       	ldi	r30, 0x40	; 64
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a5 30       	cpi	r26, 0x05	; 5
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  d2:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <DCmotor>:
}


void DCmotor(int direction, int brakeHigh)  //direction 1 = CW, direction 0 = CCW, brakeHigh 1 = brake to DC
{
    if(brakeHigh){
  da:	67 2b       	or	r22, r23
  dc:	11 f0       	breq	.+4      	; 0xe2 <DCmotor+0x8>
        PORTB = ~0x0F;       //Brake DC motor to Vcc
  de:	80 ef       	ldi	r24, 0xF0	; 240
  e0:	05 c0       	rjmp	.+10     	; 0xec <DCmotor+0x12>
    }
    else if(direction){
  e2:	89 2b       	or	r24, r25
  e4:	11 f0       	breq	.+4      	; 0xea <DCmotor+0x10>
        PORTB = ~0x0B; 		//Run DC motor clockwise
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	01 c0       	rjmp	.+2      	; 0xec <DCmotor+0x12>
    }
    else if(direction == 0){
        PORTB = ~0x07; 		//Run DC motor counter-clockwise
  ea:	88 ef       	ldi	r24, 0xF8	; 248
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	08 95       	ret

000000f0 <interruptSetup>:
    }
}

void interruptSetup()
{
    cli();  // disable all of the interrupt
  f0:	f8 94       	cli
            // config the external interrupt
    EIMSK = 0b00001010; // enable INT1, INT3
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	8d bb       	out	0x1d, r24	; 29
    EICRA = 0b11001100; // rising edge interrupt
  f6:	8c ec       	ldi	r24, 0xCC	; 204
  f8:	80 93 69 00 	sts	0x0069, r24
}
  fc:	08 95       	ret

000000fe <PWMsetup>:

void PWMsetup() // Sets up the PWN - only needs to be called once 
{
    TCCR0A |= 0x83;             //Set Waveform Generator to mode to Fast PWM   
  fe:	84 b5       	in	r24, 0x24	; 36
 100:	83 68       	ori	r24, 0x83	; 131
 102:	84 bd       	out	0x24, r24	; 36
    TIMSK0 = TIMSK0 | 0b00000010;
 104:	ee e6       	ldi	r30, 0x6E	; 110
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
    TCCR0B = 0b00000010;        //Clock scaling by 1/8
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0b10000000;         //Duty cycle set to 50%
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	87 bd       	out	0x27, r24	; 39
           
   
}//end PWMsetup
 116:	08 95       	ret

00000118 <main>:
//################## MAIN ROUTINE ##################


int main(int argc, char *argv[]){

    DDRA = 0xFF;            //lights
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	81 b9       	out	0x01, r24	; 1
 
    DDRB = 0xFF;           //Sets all PORT B pins to output (for the pwm and motor)
 11c:	84 b9       	out	0x04, r24	; 4
    DDRE = 0x00;           //Sets all PORT E pins to input (for motor choices)
 11e:	1d b8       	out	0x0d, r1	; 13
    TCCR1B |= _BV(CS10);   //Initialize the timer control register, clock scaling CS10              
 120:	80 91 81 00 	lds	r24, 0x0081
 124:	81 60       	ori	r24, 0x01	; 1
 126:	80 93 81 00 	sts	0x0081, r24

    PWMsetup(); // calls PWMsetup function to ready the PWM for use 
 12a:	0e 94 7f 00 	call	0xfe	; 0xfe <PWMsetup>
    }
}

void interruptSetup()
{
    cli();  // disable all of the interrupt
 12e:	f8 94       	cli
            // config the external interrupt
    EIMSK = 0b00001010; // enable INT1, INT3
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	8d bb       	out	0x1d, r24	; 29
    EICRA = 0b11001100; // rising edge interrupt
 134:	8c ec       	ldi	r24, 0xCC	; 204
 136:	80 93 69 00 	sts	0x0069, r24

    PWMsetup(); // calls PWMsetup function to ready the PWM for use 
    //ADCsetup(); // calls ADCsetup function to ready the ADC for use 
    interruptSetup(); //calls buttonsetup

    sei(); // sets the Global Enable for all interrupts
 13a:	78 94       	sei
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x24>

0000013e <PWM>:
   
}//end PWMsetup

void PWM(int dutyCycle) //%%%%%%%%%%%%%%%%%%%%%%
{
    OCR0A = dutyCycle;
 13e:	87 bd       	out	0x27, r24	; 39
}
 140:	08 95       	ret

00000142 <__vector_4>:

ISR(INT3_vect) //OR sensor stops belt
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	0b b6       	in	r0, 0x3b	; 59
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
    PORTA = 0x02;
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	82 b9       	out	0x02, r24	; 2
    DCmotor(0,1);   //brake high (to Vcc)
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    motorFlag = 0;
 178:	10 92 03 01 	sts	0x0103, r1
 17c:	10 92 02 01 	sts	0x0102, r1
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0b be       	out	0x3b, r0	; 59
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_2>:

ISR(INT1_vect) //motor controlled by button
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	0b b6       	in	r0, 0x3b	; 59
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
    PORTA = 0x01;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	82 b9       	out	0x02, r24	; 2

    if(motorFlag) {
 1d0:	80 91 02 01 	lds	r24, 0x0102
 1d4:	90 91 03 01 	lds	r25, 0x0103
 1d8:	89 2b       	or	r24, r25
 1da:	59 f0       	breq	.+22     	; 0x1f2 <__vector_2+0x4c>
    DCmotor(0,1);   //brake high (to Vcc)
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    motorFlag = 0;
 1e8:	10 92 03 01 	sts	0x0103, r1
 1ec:	10 92 02 01 	sts	0x0102, r1
 1f0:	12 c0       	rjmp	.+36     	; 0x216 <__vector_2+0x70>
    }
    else if (!motorFlag) {
 1f2:	80 91 02 01 	lds	r24, 0x0102
 1f6:	90 91 03 01 	lds	r25, 0x0103
 1fa:	89 2b       	or	r24, r25
 1fc:	61 f4       	brne	.+24     	; 0x216 <__vector_2+0x70>
    DCmotor(1,0); 			//run motor CW
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    motorFlag = 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 03 01 	sts	0x0103, r25
 212:	80 93 02 01 	sts	0x0102, r24
    }
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0b be       	out	0x3b, r0	; 59
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
