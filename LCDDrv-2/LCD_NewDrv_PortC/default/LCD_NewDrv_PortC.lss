
LCD_NewDrv_PortC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  00000542  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000114  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007fe  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002b5  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005f7  00000000  00000000  00001149  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001fd  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003a3  00000000  00000000  00001a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_2>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_4>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee ec       	ldi	r30, 0xCE	; 206
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a5 30       	cpi	r26, 0x05	; 5
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 32 01 	call	0x264	; 0x264 <main>
  d2:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <DCmotor>:

}

void DCmotor(int direction, int brakeHigh)  //direction 1 = CW, direction 0 = CCW, brakeHigh 1 = brake to DC
{
    if(brakeHigh){
  da:	67 2b       	or	r22, r23
  dc:	11 f0       	breq	.+4      	; 0xe2 <DCmotor+0x8>
        PORTB = ~0x0F;       //Brake DC motor to Vcc
  de:	80 ef       	ldi	r24, 0xF0	; 240
  e0:	05 c0       	rjmp	.+10     	; 0xec <DCmotor+0x12>
    }
    else if(direction){
  e2:	89 2b       	or	r24, r25
  e4:	11 f0       	breq	.+4      	; 0xea <DCmotor+0x10>
        PORTB = ~0x0B; 		//Run DC motor clockwise
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	01 c0       	rjmp	.+2      	; 0xec <DCmotor+0x12>
    }
    else if(direction == 0){
        PORTB = ~0x07; 		//Run DC motor counter-clockwise
  ea:	88 ef       	ldi	r24, 0xF8	; 248
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	08 95       	ret

000000f0 <interruptSetup>:
    }
}

void interruptSetup()
{
    cli();  // disable all of the interrupt
  f0:	f8 94       	cli
            // config the external interrupt
    EIMSK = 0b00001010; // enable INT1, INT3
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	8d bb       	out	0x1d, r24	; 29
    EICRA = 0b11001100; // rising edge interrupt
  f6:	8c ec       	ldi	r24, 0xCC	; 204
  f8:	80 93 69 00 	sts	0x0069, r24
}
  fc:	08 95       	ret

000000fe <PWMsetup>:

void PWMsetup() // Sets up the PWN - only needs to be called once 
{
    TCCR0A |= 0x83;             //Set Waveform Generator to mode to Fast PWM   
  fe:	84 b5       	in	r24, 0x24	; 36
 100:	83 68       	ori	r24, 0x83	; 131
 102:	84 bd       	out	0x24, r24	; 36
    TIMSK0 = TIMSK0 | 0b00000010;
 104:	ee e6       	ldi	r30, 0x6E	; 110
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
    TCCR0B = 0b00000010;        //Clock scaling by 1/8
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0b10000000;         //Duty cycle set to 50%
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	87 bd       	out	0x27, r24	; 39
           
   
}//end PWMsetup
 116:	08 95       	ret

00000118 <PWM>:

void PWM(int dutyCycle) //%%%%%%%%%%%%%%%%%%%%%%
{
    OCR0A = dutyCycle;
 118:	87 bd       	out	0x27, r24	; 39
}
 11a:	08 95       	ret

0000011c <__vector_4>:

ISR(INT3_vect) //OR sensor stops belt
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	0b b6       	in	r0, 0x3b	; 59
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
  //  LCDWriteStringXY(0,1,"Stop.");
    DCmotor(0,1);   //brake high (to Vcc)
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    PORTA = 0x02;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	82 b9       	out	0x02, r24	; 2
    motorFlag = 0;
 152:	10 92 03 01 	sts	0x0103, r1
 156:	10 92 02 01 	sts	0x0102, r1
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0b be       	out	0x3b, r0	; 59
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_2>:

ISR(INT1_vect) //motor controlled by button
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	0b b6       	in	r0, 0x3b	; 59
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
    

    if(motorFlag) {
 1a6:	80 91 02 01 	lds	r24, 0x0102
 1aa:	90 91 03 01 	lds	r25, 0x0103
 1ae:	89 2b       	or	r24, r25
 1b0:	69 f0       	breq	.+26     	; 0x1cc <__vector_2+0x4c>
    DCmotor(0,1);   //brake high (to Vcc)
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    PORTA = 0x01;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	82 b9       	out	0x02, r24	; 2
    motorFlag = 0;
 1c2:	10 92 03 01 	sts	0x0103, r1
 1c6:	10 92 02 01 	sts	0x0102, r1
 1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <__vector_2+0x72>
    }
    else if (!motorFlag) {
 1cc:	80 91 02 01 	lds	r24, 0x0102
 1d0:	90 91 03 01 	lds	r25, 0x0103
 1d4:	89 2b       	or	r24, r25
 1d6:	69 f4       	brne	.+26     	; 0x1f2 <__vector_2+0x72>
    DCmotor(1,0); 			//run motor CW
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	0e 94 6d 00 	call	0xda	; 0xda <DCmotor>
    motorFlag = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 03 01 	sts	0x0103, r25
 1ec:	80 93 02 01 	sts	0x0102, r24
    PORTA = 0x00;
 1f0:	12 b8       	out	0x02, r1	; 2
    }
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0b be       	out	0x3b, r0	; 59
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <mTimer>:

void mTimer (int count)
{
 218:	9c 01       	movw	r18, r24
   int i;
   i = 0;
   TCCR1B |= _BV (CS10);  //  sets prescalar to DIV 1
 21a:	80 91 81 00 	lds	r24, 0x0081
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	80 93 81 00 	sts	0x0081, r24
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 224:	80 91 81 00 	lds	r24, 0x0081
 228:	88 60       	ori	r24, 0x08	; 8
 22a:	80 93 81 00 	sts	0x0081, r24
   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 22e:	88 ee       	ldi	r24, 0xE8	; 232
 230:	93 e0       	ldi	r25, 0x03	; 3
 232:	90 93 89 00 	sts	0x0089, r25
 236:	80 93 88 00 	sts	0x0088, r24
   /* Initialize Timer 1 to zero */
   TCNT1 = 0x0000;
 23a:	10 92 85 00 	sts	0x0085, r1
 23e:	10 92 84 00 	sts	0x0084, r1
   /* Enable the output compare interrupt */
   //TIMSK1 |= _BV(OCIE1A);  //remove if global interrups is set (sei())
   /* Clear the timer interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 242:	b1 9a       	sbi	0x16, 1	; 22
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	04 c0       	rjmp	.+8      	; 0x252 <mTimer+0x3a>
   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
   {
      while ((TIFR1 & 0x02) != 0x02);
 24a:	b1 9b       	sbis	0x16, 1	; 22
 24c:	fe cf       	rjmp	.-4      	; 0x24a <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 24e:	b1 9a       	sbi	0x16, 1	; 22
	   i++;
 250:	01 96       	adiw	r24, 0x01	; 1
   /* Enable the output compare interrupt */
   //TIMSK1 |= _BV(OCIE1A);  //remove if global interrups is set (sei())
   /* Clear the timer interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
 252:	82 17       	cp	r24, r18
 254:	93 07       	cpc	r25, r19
 256:	cc f3       	brlt	.-14     	; 0x24a <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
	   i++;
   } /* while */
   TCCR1B &= ~_BV (CS10);  //  disable prescalar
 258:	80 91 81 00 	lds	r24, 0x0081
 25c:	8e 7f       	andi	r24, 0xFE	; 254
 25e:	80 93 81 00 	sts	0x0081, r24
   return;
}  /* mTimer */
 262:	08 95       	ret

00000264 <main>:
void ADCsetup();       						//initializing ADC
void interruptSetup();                      //initializing button & OR  

int main(int argc,char*argv[])
{
	DDRA = 0xFF;            //lights
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;           //Sets all PORT B pins to output (for the pwm and motor)
 268:	84 b9       	out	0x04, r24	; 4
    DDRE = 0x00;           //Sets all PORT E pins to input (for motor choices)
 26a:	1d b8       	out	0x0d, r1	; 13
    TCCR1B |= _BV(CS10);   //Initialize the timer control register, clock scaling CS10              
 26c:	80 91 81 00 	lds	r24, 0x0081
 270:	81 60       	ori	r24, 0x01	; 1
 272:	80 93 81 00 	sts	0x0081, r24

    PWMsetup(); // calls PWMsetup function to ready the PWM for use 
 276:	0e 94 7f 00 	call	0xfe	; 0xfe <PWMsetup>
    }
}

void interruptSetup()
{
    cli();  // disable all of the interrupt
 27a:	f8 94       	cli
            // config the external interrupt
    EIMSK = 0b00001010; // enable INT1, INT3
 27c:	8a e0       	ldi	r24, 0x0A	; 10
 27e:	8d bb       	out	0x1d, r24	; 29
    EICRA = 0b11001100; // rising edge interrupt
 280:	8c ec       	ldi	r24, 0xCC	; 204
 282:	80 93 69 00 	sts	0x0069, r24

    PWMsetup(); // calls PWMsetup function to ready the PWM for use 
    //ADCsetup(); // calls ADCsetup function to ready the ADC for use 
    interruptSetup(); //calls buttonsetup

    InitLCD(LS_BLINK|LS_ULINE);  //Initialize LCD module
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 9e 01 	call	0x33c	; 0x33c <InitLCD>

    sei(); // sets the Global Enable for all interrupts
 28c:	78 94       	sei
       
	
	LCDClear(); //Clear the screen
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCDByte>
 296:	ff cf       	rjmp	.-2      	; 0x296 <main+0x32>

00000298 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 298:	87 b1       	in	r24, 0x07	; 7
 29a:	80 7f       	andi	r24, 0xF0	; 240
 29c:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 29e:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 2a0:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	47 9a       	sbi	0x08, 7	; 8
 2ac:	82 2f       	mov	r24, r18
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 2b2:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 2b4:	82 95       	swap	r24
 2b6:	80 7f       	andi	r24, 0xF0	; 240
 2b8:	92 2f       	mov	r25, r18
 2ba:	9a 95       	dec	r25
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 2be:	47 98       	cbi	0x08, 7	; 8
 2c0:	92 2f       	mov	r25, r18
 2c2:	9a 95       	dec	r25
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 2c6:	47 9a       	sbi	0x08, 7	; 8
 2c8:	92 2f       	mov	r25, r18
 2ca:	9a 95       	dec	r25
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 2ce:	96 b1       	in	r25, 0x06	; 6
 2d0:	92 2f       	mov	r25, r18
 2d2:	9a 95       	dec	r25
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 2d6:	47 98       	cbi	0x08, 7	; 8
 2d8:	92 2f       	mov	r25, r18
 2da:	9a 95       	dec	r25
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 2de:	87 fd       	sbrc	r24, 7
 2e0:	e4 cf       	rjmp	.-56     	; 0x2aa <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 2e2:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 2e4:	87 b1       	in	r24, 0x07	; 7
 2e6:	8f 60       	ori	r24, 0x0F	; 15
 2e8:	87 b9       	out	0x07, r24	; 7

}
 2ea:	08 95       	ret

000002ec <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 2ec:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 2ee:	66 23       	and	r22, r22
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <LCDByte+0xa>
	CLEAR_RS();
 2f2:	46 98       	cbi	0x08, 6	; 8
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <LCDByte+0xc>
else
	SET_RS();
 2f6:	46 9a       	sbi	0x08, 6	; 8
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	82 2f       	mov	r24, r18
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 300:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 302:	88 b1       	in	r24, 0x08	; 8
 304:	93 2f       	mov	r25, r19
 306:	92 95       	swap	r25
 308:	9f 70       	andi	r25, 0x0F	; 15
 30a:	80 7f       	andi	r24, 0xF0	; 240
 30c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 30e:	98 b9       	out	0x08, r25	; 8
 310:	82 2f       	mov	r24, r18
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 316:	47 98       	cbi	0x08, 7	; 8
 318:	82 2f       	mov	r24, r18
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 31e:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 320:	88 b1       	in	r24, 0x08	; 8
 322:	3f 70       	andi	r19, 0x0F	; 15
 324:	80 7f       	andi	r24, 0xF0	; 240
 326:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 328:	88 b9       	out	0x08, r24	; 8
 32a:	82 2f       	mov	r24, r18
 32c:	8a 95       	dec	r24
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 330:	47 98       	cbi	0x08, 7	; 8
 332:	2a 95       	dec	r18
 334:	f1 f7       	brne	.-4      	; 0x332 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 336:	0e 94 4c 01 	call	0x298	; 0x298 <LCDBusyLoop>
}
 33a:	08 95       	ret

0000033c <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 33c:	1f 93       	push	r17
 33e:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 340:	8c e4       	ldi	r24, 0x4C	; 76
 342:	9d e1       	ldi	r25, 0x1D	; 29
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 348:	87 b1       	in	r24, 0x07	; 7
 34a:	8f 60       	ori	r24, 0x0F	; 15
 34c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 34e:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 350:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 352:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 354:	88 b1       	in	r24, 0x08	; 8
 356:	80 7f       	andi	r24, 0xF0	; 240
 358:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 35a:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 35c:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 35e:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	98 2f       	mov	r25, r24
 364:	9a 95       	dec	r25
 366:	f1 f7       	brne	.-4      	; 0x364 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 368:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 36a:	41 9a       	sbi	0x08, 1	; 8
 36c:	98 2f       	mov	r25, r24
 36e:	9a 95       	dec	r25
 370:	f1 f7       	brne	.-4      	; 0x36e <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 372:	47 98       	cbi	0x08, 7	; 8
 374:	8a 95       	dec	r24
 376:	f1 f7       	brne	.-4      	; 0x374 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 378:	0e 94 4c 01 	call	0x298	; 0x298 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 37c:	81 2f       	mov	r24, r17
 37e:	8c 60       	ori	r24, 0x0C	; 12
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 386:	88 e2       	ldi	r24, 0x28	; 40
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCDByte>
}
 38e:	1f 91       	pop	r17
 390:	08 95       	ret

00000392 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ec 01       	movw	r28, r24
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCDByte>
	msg++;
 3a0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 3a2:	88 81       	ld	r24, Y
 3a4:	88 23       	and	r24, r24
 3a6:	c9 f7       	brne	.-14     	; 0x39a <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	df 93       	push	r29
 3b8:	cf 93       	push	r28
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <LCDWriteInt+0xe>
 3bc:	00 d0       	rcall	.+0      	; 0x3be <LCDWriteInt+0x10>
 3be:	0f 92       	push	r0
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	9c 01       	movw	r18, r24
 3c6:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 3c8:	fe 01       	movw	r30, r28
 3ca:	31 96       	adiw	r30, 0x01	; 1
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	df 01       	movw	r26, r30
 3d0:	1d 92       	st	X+, r1
 3d2:	8a 95       	dec	r24
 3d4:	e9 f7       	brne	.-6      	; 0x3d0 <LCDWriteInt+0x22>
 3d6:	fe 01       	movw	r30, r28
 3d8:	35 96       	adiw	r30, 0x05	; 5
 3da:	0d c0       	rjmp	.+26     	; 0x3f6 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 3dc:	c9 01       	movw	r24, r18
 3de:	6a e0       	ldi	r22, 0x0A	; 10
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	0e 94 3e 02 	call	0x47c	; 0x47c <__divmodhi4>
 3e6:	80 83       	st	Z, r24
	val=val/10;
 3e8:	c9 01       	movw	r24, r18
 3ea:	6a e0       	ldi	r22, 0x0A	; 10
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 3e 02 	call	0x47c	; 0x47c <__divmodhi4>
 3f2:	9b 01       	movw	r18, r22
 3f4:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 3f6:	21 15       	cp	r18, r1
 3f8:	31 05       	cpc	r19, r1
 3fa:	81 f7       	brne	.-32     	; 0x3dc <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 3fc:	bf ef       	ldi	r27, 0xFF	; 255
 3fe:	0f 3f       	cpi	r16, 0xFF	; 255
 400:	1b 07       	cpc	r17, r27
 402:	79 f4       	brne	.+30     	; 0x422 <LCDWriteInt+0x74>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 408:	ae 01       	movw	r20, r28
 40a:	4f 5f       	subi	r20, 0xFF	; 255
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	02 c0       	rjmp	.+4      	; 0x414 <LCDWriteInt+0x66>
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	fa 01       	movw	r30, r20
 416:	e2 0f       	add	r30, r18
 418:	f3 1f       	adc	r31, r19
 41a:	80 81       	ld	r24, Z
 41c:	88 23       	and	r24, r24
 41e:	c1 f3       	breq	.-16     	; 0x410 <LCDWriteInt+0x62>
 420:	04 c0       	rjmp	.+8      	; 0x42a <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 422:	25 e0       	ldi	r18, 0x05	; 5
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	20 1b       	sub	r18, r16
 428:	31 0b       	sbc	r19, r17
 42a:	7e 01       	movw	r14, r28
 42c:	08 94       	sec
 42e:	e1 1c       	adc	r14, r1
 430:	f1 1c       	adc	r15, r1
 432:	e2 0e       	add	r14, r18
 434:	f3 1e       	adc	r15, r19
 436:	89 01       	movw	r16, r18
 438:	09 c0       	rjmp	.+18     	; 0x44c <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 43a:	f7 01       	movw	r30, r14
 43c:	81 91       	ld	r24, Z+
 43e:	7f 01       	movw	r14, r30
 440:	80 5d       	subi	r24, 0xD0	; 208
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 448:	0f 5f       	subi	r16, 0xFF	; 255
 44a:	1f 4f       	sbci	r17, 0xFF	; 255
 44c:	05 30       	cpi	r16, 0x05	; 5
 44e:	11 05       	cpc	r17, r1
 450:	a4 f3       	brlt	.-24     	; 0x43a <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	cf 91       	pop	r28
 45e:	df 91       	pop	r29
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	08 95       	ret

0000046a <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 46a:	88 32       	cpi	r24, 0x28	; 40
 46c:	30 f4       	brcc	.+12     	; 0x47a <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 46e:	61 11       	cpse	r22, r1
 470:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 472:	80 68       	ori	r24, 0x80	; 128
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCDByte>
 47a:	08 95       	ret

0000047c <__divmodhi4>:
 47c:	97 fb       	bst	r25, 7
 47e:	09 2e       	mov	r0, r25
 480:	07 26       	eor	r0, r23
 482:	0a d0       	rcall	.+20     	; 0x498 <__divmodhi4_neg1>
 484:	77 fd       	sbrc	r23, 7
 486:	04 d0       	rcall	.+8      	; 0x490 <__divmodhi4_neg2>
 488:	0c d0       	rcall	.+24     	; 0x4a2 <__udivmodhi4>
 48a:	06 d0       	rcall	.+12     	; 0x498 <__divmodhi4_neg1>
 48c:	00 20       	and	r0, r0
 48e:	1a f4       	brpl	.+6      	; 0x496 <__divmodhi4_exit>

00000490 <__divmodhi4_neg2>:
 490:	70 95       	com	r23
 492:	61 95       	neg	r22
 494:	7f 4f       	sbci	r23, 0xFF	; 255

00000496 <__divmodhi4_exit>:
 496:	08 95       	ret

00000498 <__divmodhi4_neg1>:
 498:	f6 f7       	brtc	.-4      	; 0x496 <__divmodhi4_exit>
 49a:	90 95       	com	r25
 49c:	81 95       	neg	r24
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <__udivmodhi4>:
 4a2:	aa 1b       	sub	r26, r26
 4a4:	bb 1b       	sub	r27, r27
 4a6:	51 e1       	ldi	r21, 0x11	; 17
 4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <__udivmodhi4_ep>

000004aa <__udivmodhi4_loop>:
 4aa:	aa 1f       	adc	r26, r26
 4ac:	bb 1f       	adc	r27, r27
 4ae:	a6 17       	cp	r26, r22
 4b0:	b7 07       	cpc	r27, r23
 4b2:	10 f0       	brcs	.+4      	; 0x4b8 <__udivmodhi4_ep>
 4b4:	a6 1b       	sub	r26, r22
 4b6:	b7 0b       	sbc	r27, r23

000004b8 <__udivmodhi4_ep>:
 4b8:	88 1f       	adc	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	5a 95       	dec	r21
 4be:	a9 f7       	brne	.-22     	; 0x4aa <__udivmodhi4_loop>
 4c0:	80 95       	com	r24
 4c2:	90 95       	com	r25
 4c4:	bc 01       	movw	r22, r24
 4c6:	cd 01       	movw	r24, r26
 4c8:	08 95       	ret

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
